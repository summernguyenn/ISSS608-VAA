[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "What does Singapore‚Äôs population really look like in 2024?\nUsing interactive visualizations, this article takes you beyond raw numbers to uncover where people live, how age groups are distributed, and which regions are dominated by children, seniors, or working professionals. From balanced age compositions in central districts to extreme skews in lesser-known areas, the charts invite you to explore the evolving face of Singapore ‚Äî and what it means for the nation‚Äôs future.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "Visual Analytics and Applications\n    \n    Welcome to Nguyen Ha (Summer)'s portfolio.\n     This website is crafted as part of the ISSS608 Visual Analytics and Applications course at Singapore Management University (SMU), under the guidance of Professor Kam Tin Seong.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Welcome to this chapter! Here, you‚Äôll explore a set of powerful ggplot2 extensions that help you craft stunning, publication-ready visualizations with precision and polish.\nBy the end of this session, you‚Äôll be able to confidently:\n\nControl annotation placement using the {ggrepel} package ‚Äî no more overlapping labels!\nDesign publication-quality visuals with aesthetic finesse using {ggthemes} and {hrbrthemes}.\nBuild composite figures by smartly combining multiple plots using the {patchwork} package.\n\nLet‚Äôs level up your data storytelling game ‚Äî one plot at a time!",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.2.1. Installing and loading the required libraries",
    "text": "2.2.1. Installing and loading the required libraries\nIn this exercise, alongside tidyverse, we‚Äôll use four essential R packages to boost your plotting game with ggplot2. Here‚Äôs a quick rundown:\n\n{ggrepel}: Avoid overlapping text labels by using repelling geoms.\n{ggthemes}: Access a library of extra themes, geoms, and scales for your plots.\n{hrbrthemes}: Add typography-focused themes for better readability and polish.\n{patchwork}: Seamlessly stitch multiple ggplot2 graphs into a single composite figure.\n\nTo ensure all packages are installed and loaded, use the following code chunk:\n\npacman::p_load(\n  ggrepel, \n  patchwork, \n  ggthemes, \n  hrbrthemes, \n  tidyverse\n)\n\n\n\n\n\n\n\nSmart Loading Trick!\n\n\n\nThis command checks if the packages are already installed.\nIf not, it installs them ‚Äî saving you time and hassle!",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.2.2. Importing data",
    "text": "2.2.2. Importing data\nA dataset named Exam_data is used in this section. It contains year-end examination scores for a cohort of Primary 3 students from a local school and is stored in CSV format.\nThe read_csv() function from the readr package, part of the tidyverse, is applied to import the file:\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nüìã Preview of the data:\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.3.1. Working with ggrepel",
    "text": "2.3.1. Working with ggrepel\nAdding too many labels to a plot can clutter the visualization and reduce clarity. The ggrepel package provides an effective solution by automatically adjusting the position of labels to avoid overlapping.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.4.1. Working with ggtheme package",
    "text": "2.4.1. Working with ggtheme package\nThe ggthemes package offers additional themes for ggplot2 that mimic the visual styles of well-known publications and tools such as:\n\nEdward Tufte\nStephen Few\nFivethirtyeight\nThe Economist\nThe Wall Street Journal\nStata\nExcel\n\nIn the following example, the Economist theme is applied.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\nMore from ggthemes\n\n\n\nAdditional geoms and scales are also available via ggthemes.\nMore information can be found in this vignette.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.4.2. Working with hrbthems package",
    "text": "2.4.2. Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this ‚Äúproduction workflow‚Äù is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?`\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.1. Creating Composite Graphics: patchwork methods",
    "text": "2.5.1. Creating Composite Graphics: patchwork methods\nSeveral ggplot2 extensions provide functions to create composite graphics by combining multiple plots into a single figure. Notable examples include:\n\ngrid.arrange() from the gridExtra package\n\nplot_grid() from the cowplot package\n\npatchwork, a purpose-built extension for composing multiple ggplot2 outputs into a unified layout\n\nAmong these, the patchwork package offers a particularly simple and intuitive syntax for arranging plots. The basic layout rules include:\n\nUse the + operator for two-column layouts\n\nWrap plots in parentheses () to group them\n\nUse the / operator to stack plots in rows",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.2. Combining two ggplot2 graphs",
    "text": "2.5.2. Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using the patchwork package.\n\n\n\n\n\n\nNote\n\n\n\nObserve how clean and intuitive the syntax is when building a combined figure layout!\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.3. Combining three ggplot2 graphs",
    "text": "2.5.3. Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n‚Äú/‚Äù operator to stack two ggplot2 graphs,\n‚Äú|‚Äù operator to place the plots beside each other,\n‚Äú()‚Äù operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.4. Creating a composite figure with tag",
    "text": "2.5.4. Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.5. Creating figure with insert",
    "text": "2.5.5. Creating figure with insert\nBesides placing plots side-by-side or in stacked layouts, patchwork also enables flexible placement of plots on top of each other.\nUsing inset_element(), one or more graphics can be freely overlaid on a base plot ‚Äî ideal for highlighting insights with mini visual summaries.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.6. Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6. Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually driven data story, animated graphics tend to draw more attention and leave a stronger impression than static visuals. In this hands-on section, you‚Äôll learn how to build animated data visualizations using the gganimate and plotly R packages.\nYou‚Äôll also apply: - tidyr for reshaping and organizing data\n- dplyr for data wrangling, filtering, and transformation\n\n\n\n\n\n\nWhy animation matters\n\n\n\nMotion helps highlight patterns over time, build engagement, and illustrate dynamic trends that static plots can‚Äôt show effectively.\n\n\n\n\nAnimation in R doesn‚Äôt make the plot itself move. Instead, it creates many static frames (individual plots), each representing a snapshot in time or state, and stitches them together to simulate motion‚Äîjust like a flipbook or cartoon.\nEach frame is: - A subset of the dataset - A new version of the same plot (but with different values) - Rendered in sequence to create flow\nThis structure is perfect for showing time series changes, category transitions, or movement through space.\n\n\n\nAnimation Frame Concept\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat drives the animation is a variable used to split the dataset‚Äîcommonly time (e.g., year, month) or a sequence of states.\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse transition_*() functions in gganimate like transition_time() or transition_states() to define how the animation progresses between frames.\n\n\n\n\n\nBefore diving into the steps for creating animated statistical graphs, it‚Äôs essential to understand a few core concepts and terms that define how animation works in data visualization.\nKey Terms\n\nFrame\nIn an animated plot, each frame represents either a point in time (e.g., a year) or a specific category (e.g., region or class). When the frame changes, the plot updates to reflect new values for that subset of data.\nAnimation Attributes\nThese are settings that control animation behavior, such as:\n\nDuration of each frame\n\nEasing function for transitions (e.g., linear, cubic-in-out)\n\nWhether the animation loops or starts from the current frame\n\n\n\n\n\n\n\n\nTip\n\n\n\nBefore creating animated graphs, ask:\n‚û°Ô∏è Does this animation add real value, or is it just visual noise?\nFor exploratory analysis, static plots might be more efficient.\nBut for presentations or storytelling, a well-timed animation can boost clarity, engagement, and emotional connection‚Äîespecially when explaining changes over time.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#basic-concepts-of-animation",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Animation in R doesn‚Äôt make the plot itself move. Instead, it creates many static frames (individual plots), each representing a snapshot in time or state, and stitches them together to simulate motion‚Äîjust like a flipbook or cartoon.\nEach frame is: - A subset of the dataset - A new version of the same plot (but with different values) - Rendered in sequence to create flow\nThis structure is perfect for showing time series changes, category transitions, or movement through space.\n\n\n\nAnimation Frame Concept\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhat drives the animation is a variable used to split the dataset‚Äîcommonly time (e.g., year, month) or a sequence of states.\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse transition_*() functions in gganimate like transition_time() or transition_states() to define how the animation progresses between frames.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#terminology",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Before diving into the steps for creating animated statistical graphs, it‚Äôs essential to understand a few core concepts and terms that define how animation works in data visualization.\nKey Terms\n\nFrame\nIn an animated plot, each frame represents either a point in time (e.g., a year) or a specific category (e.g., region or class). When the frame changes, the plot updates to reflect new values for that subset of data.\nAnimation Attributes\nThese are settings that control animation behavior, such as:\n\nDuration of each frame\n\nEasing function for transitions (e.g., linear, cubic-in-out)\n\nWhether the animation loops or starts from the current frame\n\n\n\n\n\n\n\n\nTip\n\n\n\nBefore creating animated graphs, ask:\n‚û°Ô∏è Does this animation add real value, or is it just visual noise?\nFor exploratory analysis, static plots might be more efficient.\nBut for presentations or storytelling, a well-timed animation can boost clarity, engagement, and emotional connection‚Äîespecially when explaining changes over time.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#loading-the-r-packages",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "4.2.1. Loading the R Packages",
    "text": "4.2.1. Loading the R Packages\nBefore creating animated visualizations, ensure the following R packages are installed and loaded:\n\nplotly: For building interactive statistical graphics.\ngganimate: A ggplot2 extension for animated plots.\ngifski: Converts video frames into animated GIFs using high-quality color handling and dithering.\ngapminder: Contains excerpted data from Gapminder.org, especially useful for country-based animations.\ntidyverse: A collection of packages for data wrangling, visualization, and transformation.\n\nUse the following code to install and load them efficiently:\n\npacman::p_load(\n  readxl, gifski, gapminder,\n  plotly, gganimate, tidyverse\n)\n\n\n\n\n\n\n\nTip\n\n\n\nThe pacman::p_load() function automatically checks if a package is installed‚Äîif not, it installs it before loading. It‚Äôs a smart and concise way to manage dependencies.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-the-data",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "4.2.2 Importing the Data",
    "text": "4.2.2 Importing the Data\nThis section demonstrates how to import the Data worksheet from the GlobalPopulation.xls Excel workbook and prepare it for animation.\nThe objective includes: - Reading the Excel file - Converting the Country and Continent columns to factors - Converting the Year column to integer format\nStep 1: Initial Version Using mutate_each() (Deprecated)\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_each(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to Learn\n\n\n\n\nread_xls() from the readxl package is used to import Excel worksheets.\nmutate_each() combined with funs() (both deprecated) applies transformations across selected columns.\nmutate() with as.integer() updates the Year column to numeric format.\n\n\n\nStep 2: Updated Version Using mutate_at() To align with newer versions of dplyr, mutate_each() is replaced with mutate_at().\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nDeprecated!\n\n\n\nmutate_at() remains functional but is soft-deprecated in favor of the more consistent across() syntax.\n\n\nStep 3: Final (Recommended) Version Using across() The most up-to-date and robust syntax utilizesmutate() with across().\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nTip\n\n\n\nThe across() function is the recommended approach for applying transformations to multiple columns. It ensures compatibility with current and future versions of the tidyverse.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-a-static-population-bubble-plot",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "4.3.1. Building a Static Population Bubble Plot",
    "text": "4.3.1. Building a Static Population Bubble Plot\nThe following code chunk creates a static bubble plot using ggplot2, which forms the foundation for animation:\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-the-animated-bubble-plot",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "4.3.2. Building the Animated Bubble Plot",
    "text": "4.3.2. Building the Animated Bubble Plot\nThis section adds animation to the previously constructed bubble plot using gganimate.\n\ntransition_time() from gganimate is used to create transitions across distinct time states (e.g., Year).\nease_aes() controls the easing of aesthetics during transitions. The default is 'linear', with alternatives including quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\nThe following code generates the animated bubble chart:\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')\n\nThis chart animates population bubbles over time, with smooth transitions between years using linear easing. The {frame_time} placeholder dynamically updates the plot title for each frame in the animation.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "4.4.1. Building an Animated Bubble Plot: ggplotly() Method",
    "text": "4.4.1. Building an Animated Bubble Plot: ggplotly() Method\nThis section demonstrates how to animate a bubble chart using ggplotly(). The animation is driven by the frame aesthetic, which enables transitions between yearly data points.\n\nThe plotThe code\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop,\n             aes(x = Old,\n                 y = Young,\n                 size = Population,\n                 colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged',\n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem,theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on_Exercise 4 - Programming Animated Statistical Graphics with R",
    "section": "4.4.2. Building an animated bubble plot: plot_ly() method",
    "text": "4.4.2. Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\n\nPractice: Age Distribution Over Time Using ggplot2 and gganimate\na. Using ggplot2\n\nggplot(globalPop, aes(x = Old, fill = factor(Year))) +\n  geom_density(alpha = 0.5) +\n  labs(title = \"Distribution of Aged Population Over Time\",\n       x = \"% Aged\",\n       y = \"Density\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPurpose\n\n\n\nThis non-animated plot provides quantitative insight about shifting population structure. It complements the animated bubble plot by showing statistical distribution rather than motion.\n\n\nb. Using gganimate\n\nggplot(globalPop, aes(x = Old, fill = factor(Year))) +\n  geom_density(alpha = 0.6, colour = \"white\") +\n  labs(title = \"Year: {frame_time}\",\n       subtitle = \"Distribution of % Aged Population\",\n       x = \"% Aged\",\n       y = \"Density\") +\n  theme_minimal() +\n  transition_time(Year) +\n  ease_aes('cubic-in-out')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated Bonus Insight\n\n\n\nThis animated density plot highlights demographic shifts in aging. The rightward movement of the peak density over time suggests an increase in elderly population ‚Äî a key demographic trend that complements the animated bubble plots.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "4 - Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on session, you‚Äôll dive into the world of interactive data visualization using two powerful R packages:\n\nggiraph ‚Äì for adding interactivity to your ggplot2 charts\n\nplotly ‚Äì for creating stunning, interactive web-based graphics\n\nLet‚Äôs bring your data to life‚Äîclick, hover, and explore like never before!",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.4.1. Tooltip effect with tooltip aesthetic",
    "text": "3.4.1. Tooltip effect with tooltip aesthetic\nThe example below demonstrates how to create an interactive statistical plot using the ggiraph package. The process involves two main steps:\n\nConstructing a ggplot object with interactive geoms\n\nRendering it using girafe() to produce an interactive SVG object for the HTML page\n\nCode Example\n\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\n\n\nHow It Works\n\n\n\n\ngeom_dotplot_interactive() adds interactive behavior to standard ggplot2 geoms.\nThe tooltip aesthetic defines the content shown when hovering over each element.\ngirafe() renders the plot as an interactive SVG widget, making it suitable for web display.\n\nFor more information on interactive geoms, see the ggiraph documentation.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.5.1. Displaying multiple information on tooltip",
    "text": "3.5.1. Displaying multiple information on tooltip\n\n\n\n\n\n\nCustomizing Tooltip Content\n\n\n\nThe tooltip content can be customized by creating a new field using string concatenation. In the example below, the tooltip column combines ID and CLASS values for each observation.\n\n\n\nThe codeThe plot\n\n\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS))\n\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8 * 0.618\n)\n\n\nLines 1‚Äì3 create a new field called tooltip and populate it with combined text from the ID and CLASS columns.\nLine 7 applies this customized tooltip content within geom_dotplot_interactive().",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.1. Customising Tooltip style",
    "text": "3.6.1. Customising Tooltip style\nTooltips are an essential part of interactive visualizations, offering users instant context.\nThis section demonstrates how to customize tooltip styles in {ggiraph} using the opts_tooltip function with CSS declarations.\n\nExample\n\n\nThe codeThe plot\n\n\n\n# Define custom tooltip CSS\ntooltip_css &lt;- \"background-color:white; font-style:bold; color:black;\" \n\n# Build the interactive dot plot\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the plot with customized tooltip styling\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,  # Apply golden ratio for balanced proportions\n  options = list(\n    opts_tooltip(css = tooltip_css)\n  )\n)\n\nKey Styling Points: - Background Color: White - Font Color: Black - Font Style: Bold\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyling Tip\n\n\n\nApplying subtle customizations to tooltip appearance can enhance visualization clarity and maintain consistent visual branding across projects.\n\n\n\nPractice: Plot with customized hover styles\n\n# Define advanced tooltip and hover CSS\ntooltip_css &lt;- \"\n  background-color: #E0F7FA;    \n  color: #006064;      \n  font-weight: bold;\n  font-family: 'Verdana', sans-serif;\n  padding: 8px;\n  border: 2px solid #4DD0E1;    \n  border-radius: 10px;\n  box-shadow: 3px 3px 8px rgba(0, 96, 100, 0.3);\n\"\nhover_css &lt;- \"fill:skyblue; stroke:white; stroke-width:2px;\"\nselected_css &lt;- \"fill:red; stroke:black; stroke-width:3px;\"\n\n# Build interactive dot plot\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID, data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the interactive plot with advanced customizations\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_tooltip(css = tooltip_css),\n    opts_hover(css = hover_css),\n    opts_selection(css = selected_css, type = \"single\")\n  )\n)\n\n\n\n\n\nKey Advanced Styling Points:\n\nTooltip:\n\nBackground: Black\nText Color: White\nStyle: Italic\nPadding and Rounded Corners\nShadow effect\n\nHover Effect:\n\nFill changes to Sky Blue\nBlack outline with 2px thickness\n\nSelection Effect:\n\nFill turns Red\nStronger black outline (3px thickness)\n\n\nAdditional References\n\nFurther customization options for girafe objects: View documentation\nBenefits of tooltip customization:\n\nIncreases readability\nEnhances user interaction\nSupports consistent design systems &gt; Small design improvements in tooltips can significantly elevate the quality of interactive data experiences.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.2. Displaying Statistics on Tooltip",
    "text": "3.6.2. Displaying Statistics on Tooltip\nTooltips can also be customized to display dynamic statistical summaries.\nIn the example below, a function is created to compute the 90% confidence interval of the mean, and the resulting statistics are embedded directly into the tooltip text.\n\nCode Example\n\n\n# Define tooltip function displaying mean and confidence interval\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\n# Build interactive plot with statistical tooltips\ngg_point &lt;- ggplot(data = exam_data, aes(x = RACE)) +\n  stat_summary(\n    aes(\n      y = MATHS,\n      tooltip = after_stat(tooltip(y, ymax))\n    ),\n    fun.data = \"mean_se\",\n    geom = GeomInteractiveCol,\n    fill = \"light blue\"\n  ) +\n  stat_summary(\n    aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\",\n    width = 0.2,\n    size = 0.2\n  )\n\n# Render the plot\ngirafe(\n  ggobj = gg_point,\n  width_svg = 8,\n  height_svg = 8 * 0.618\n)\n\n\n\n\n\nKey Components:\n\nTooltip: Displays mean ¬± standard error dynamically\nInteractive Element: Bars created with GeomInteractiveCol.\nAdditional Layer: errorbar geom added to represent variability.\n\n\nPractice - Additional Visualization: Flipping the Coordinates\nApplying coord_flip() transforms the visualization to a horizontal layout, enhancing readability when many categories exist.\n\nCode Example\n\n\n# Flipped and color-enhanced version of the interactive plot\ngg_point_flipped_color &lt;- ggplot(data = exam_data, aes(x = RACE, fill = RACE)) +\n  stat_summary(\n    aes(\n      y = MATHS,\n      tooltip = after_stat(tooltip(y, ymax))\n    ),\n    fun.data = \"mean_se\",\n    geom = GeomInteractiveCol\n  ) +\n  stat_summary(\n    aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\",\n    width = 0.2,\n    size = 0.2\n  ) +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  theme_minimal()\n\n# Render the flipped, colored graph\ngirafe(\n  ggobj = gg_point_flipped_color,\n  width_svg = 8,\n  height_svg = 8 * 0.618\n)\n\n\n\n\n\nVisual Output:\nA horizontally flipped interactive column chart, maintaining tooltips that display mean scores and confidence intervals.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.3. Hover Effect with data_id Aesthetic",
    "text": "3.6.3. Hover Effect with data_id Aesthetic\nThe data_id aesthetic provides another interactive feature in {ggiraph}, allowing elements to be highlighted upon mouse hover.\nThis creates a more dynamic and responsive visualization experience.\n\nCode Example\n\n\n# Build interactive dot plot with data_id for hover effect\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the interactive plot\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\n\nHover Interaction: Elements sharing the same data_id will be highlighted together when hovered.\n\n\n\n\n\n\n\nDefault Hover Style\n\n\n\nThe default hover effect is controlled by:\n\nhover_css = \"fill:orange;\"\n\nMeaning elements will change their fill color to orange when hovered.\n\n\nUseful Related Parameters\n\nhover_css: Defines the CSS styling applied on hover. Custom styles such as changing stroke color, size, or opacity can be specified.\nselected_css: Defines styling when an element is selected (optional).\ntooltip: Can be combined with data_id to display additional information on hover.\n\n\nInteractive highlighting facilitates easier exploration of grouped data relationships within a visualization.\n\n\nPractice: Display labels dynamically during hover interactions\n\n# Build interactive dot plot with both data_id and tooltip\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(\n      data_id = CLASS,  # Highlight grouped elements\n      tooltip = paste(\"Class:\", CLASS)  # Display label on hover\n    ),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the interactive plot\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\nKey Interactive Features:\n\nHover Highlight: Elements associated with the same CLASS are highlighted together.\nTooltip Display: Shows a label \"Class: [CLASS]\" when hovering over any dot.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.4. Styling hover effect",
    "text": "3.6.4. Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n# Build interactive dot plot with both data_id and tooltip\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nDefault Hover Style\n\n\n\nThe default hover effect is controlled by:\n\nhover_css = \"fill:orange;\"\n\nMeaning elements will change their fill color to orange when hovered.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.4.5. Combining tooltip and hover effect",
    "text": "3.4.5. Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.6. Click Effect with onclick",
    "text": "3.6.6. Click Effect with onclick\nThe onclick argument of ggiraph provides hotlink interactivity directly in web-based plots. You can associate JavaScript actions with data points‚Äîsuch as opening a new tab‚Äîwhen a user clicks on a visual element.\n\nExample: Make Data Points Clickable\n\nThe following code chunk demonstrates how to embed a window.open() JavaScript call into your dataset for clickable links:\n\n# Generate onclick JavaScript calls\nexam_data$onclick &lt;- sprintf(\n  \"window.open(\\\"%s%s\\\")\",\n  \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\n  as.character(exam_data$ID)\n)\n\n# Create interactive dot plot\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID, onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render as an interactive widget\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe onclick argument must be a string column in your dataset that contains valid JavaScript expressions. Invalid strings will break interactivity.\n\n\n\nPractice: Combine with Tooltip for Better UX\n\naes(tooltip = ID, onclick = onclick)\n\nAesthetic mapping: \n* `tooltip` -&gt; `ID`\n* `onclick` -&gt; `onclick`\n\n\n\n\n\n\n\n\nTip\n\n\n\nCombining tooltip with onclick provides both hover feedback and clickable navigation. This improves the user‚Äôs understanding before taking action.\n\n\n\n\nPractice: Debug with a Click URL Table\n\nlibrary(DT)\ndatatable(exam_data[, c(\"ID\", \"onclick\")])\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis preview helps validate that the links are correct and safe before rendering your interactive plot to users.\n\n\n\n\nPractice: Add a Static Bar Chart for Context\nProvide an overview of the MATHS score distribution alongside the interactive plot.\n\nggplot(exam_data, aes(x = MATHS)) +\n  geom_bar(fill = \"#4DAF4A\") +\n  labs(title = \"Distribution of MATHS Scores\", x = \"Score\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvance\n\n\n\nYou can pair ggiraph with Shiny to allow reactive onclick behavior, making it possible to dynamically change visuals or fetch new data when users click.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.7. Coordinated Multiple Views with ggiraph",
    "text": "3.6.7. Coordinated Multiple Views with ggiraph\nCoordinated multiple views allow you to interactively highlight shared data points across multiple plots. For example, clicking on a dot in one plot (e.g., MATHS) will also highlight the corresponding point in another plot (e.g., ENGLISH).\n\nCode: Interactive Coordination Example\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\n\n\nKey Concept\n\n\n\nThe data_id aesthetic links the same data point across different plots. When selected in one plot, it triggers a highlight in the other.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.7.1. Creating an Interactive Scatter Plot: plot_ly() Method",
    "text": "3.7.1. Creating an Interactive Scatter Plot: plot_ly() Method\nThe plot_ly() function allows you to build interactive scatter plots from raw data, using intuitive syntax. Below is a simple example that visualizes students‚Äô MATHS and ENGLISH scores.\n\nExample: Scatter Plot of Exam Scores\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(\n  data = exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH\n)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe tilde ~ symbol is used in plotly to signal mapping of variables from the dataset‚Äîsimilar to aes() in ggplot2.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.7.2. Working with visual variable: plot_ly() method",
    "text": "3.7.2. Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e.¬†RACE).\n\nExample\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.7.3. Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3. Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nExample\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.7.4. Coordinated Multiple Views with plotly",
    "text": "3.7.4. Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nExample\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.8.1. Interactive Data Table: DT package",
    "text": "3.8.1. Interactive Data Table: DT package\nThe DT package in R is a wrapper for the DataTables JavaScript library. It enables the rendering of interactive and searchable HTML tables directly from R.\n\nPowered by the JavaScript library DataTables\nCompatible with R Markdown and Shiny outputs\nSupports sorting, filtering, pagination, and column visibility\n\n\n\n\n\n\n\nDid you know?\n\n\n\nThe DT package is part of the htmlwidgets ecosystem, which means you can combine it with tools like crosstalk to enable linked interactivity between plots and tables.\n\n\n\nExample: Render a Compact Interactive Table\n\n\nDT::datatable(\n  exam_data,\n  class = \"compact\"\n)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can customize the appearance using the class argument (‚Äúcompact‚Äù, ‚Äústripe‚Äù, ‚Äúhover‚Äù, ‚Äúcell-border‚Äù). You can also enable search, export, or column filters via the options argument.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.8.2. Linked Brushing: crosstalk Method",
    "text": "3.8.2. Linked Brushing: crosstalk Method\nLinked brushing allows you to select points on a plot and highlight the corresponding rows in a data table, and vice versa. This interaction is made possible using the crosstalk package, which enables cross-widget communication between plotly, DT, and other htmlwidgets.\n\nExample Code: Coordinated Highlighting\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.9.1. ggiraph",
    "text": "3.9.1. ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nSwiss Olympians - the solo specialists (interactive graphs using ggiraph)\nGgiraph Reference Guide (online)\nGgiraph Reference Guide (PDF)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.9.2. plotly for R",
    "text": "3.9.2. plotly for R\n\nGetting Started with Plotly in R\nExample plotly R graphs collection\nCarson Sievert (2020) ‚Äî Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC. Free online version available here\nPlotly R Figure Reference\nPlotly R Library Fundamentals\nPlotly Getting Started\nStep-by-step gganimate tutorial (by senior)\nBuild animation with gganimate\nCreate composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() from the pacman package. This function automatically checks whether the tidyverse package is installed.\n\nIf not installed, it installs it.\nIf already installed, it simply loads it into the R environment.\n\nThis ensures that all required libraries are ready to use without manual installation.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe function read_csv() from the readr package (part of the tidyverse) is used to import datasets into R.\nIn this example, the dataset Exam_data.csv contains exam grades of P3 students from a local school in Singapore.\nüß† Purpose: To load the data into R for analysis.\nüîΩ The code below performs this task:\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nüìã Preview of the data:\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() from the pacman package. This function automatically checks whether the tidyverse package is installed.\n\nIf not installed, it installs it.\nIf already installed, it simply loads it into the R environment.\n\nThis ensures that all required libraries are ready to use without manual installation.\n\npacman::p_load(tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The function read_csv() from the readr package (part of the tidyverse) is used to import datasets into R.\nIn this example, the dataset Exam_data.csv contains exam grades of P3 students from a local school in Singapore.\nüß† Purpose: To load the data into R for analysis.\nüîΩ The code below performs this task:\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nüìã Preview of the data:\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics (Base R) and ggplot2 each plot a histogram of the Maths scores.\n\nBase Rggplot2\n\n\n\nhist(exam_data$MATHS,\n     main = \"Histogram of exam_data$MATHS\",\n     col = \"grey\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(\n    bins = 10,\n    boundary = 100,\n    color = \"black\",\n    fill = \"grey\"\n  ) +\n  ggtitle(\"Distribution of Maths scores\") +\n  xlab(\"MATHS\") +\n  ylab(\"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy ggplot2 is preferred\n\n\n\n\nLayered Grammar\nggplot2 builds plots incrementally. You can add layers step-by-step (e.g., points, lines, labels), making it intuitive for complex visuals.\nAesthetic Mapping\nEasily map data to visual features like color, shape, or size ‚Äî enabling richer, multidimensional graphics.\nFaceting Made Easy\nExplore subgroups with facet_wrap() or facet_grid() ‚Äî ideal for comparing distributions or trends across categories.\nProfessional Appearance\nPlots look polished by default and can be styled with built-in themes (theme_minimal(), theme_classic(), etc.).\nConsistent Syntax\nOne consistent framework to produce many chart types ‚Äî making your code easier to read, write, and reuse.\n\n\n\nCompared to base R, ggplot2 encourages a more thoughtful design process, supports deeper customization, and improves reproducibility ‚Äî especially in analytical reports or presentations.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is inspired by Leland Wilkinson‚Äôs Grammar of Graphics. It helps you build plots layer by layer, where each part contributes a unique role to your final visualization.\n\n\n\n\n\n\n\nüî¢ Data\n\n\n\nThe starting point of any plot ‚Äî your dataset. All other layers build on this.\n\n\n\n\n\n\n\n\nüé® Aesthetics\n\n\n\nMaps your data to visual elements like position, color, shape, or size. This layer gives structure to your graphic.\n\n\n\n\n\n\n\n\nüìê Geometries\n\n\n\nThese are the grap hical marks ‚Äî like bars, lines, or points ‚Äî that display your data.\n\n\n\n\n\n\n\n\nüß© Facets\n\n\n\nFaceting allows you to split data into subplots for easier comparison across categories.\n\n\n\n\n\n\n\n\nüìä Statistics\n\n\n\nApplies transformations (e.g., mean, median, count) that help summarize or highlight trends in your data.\n\n\n\n\n\n\n\n\nüß≠ Coordinates\n\n\n\nControls the spatial layout of your plot ‚Äî for example, Cartesian or polar coordinates.\n\n\n\n\n\n\n\n\nüé≠ Themes\n\n\n\nControls the look and feel of your plot: fonts, backgrounds, gridlines, titles, and more.\n\n\nReference:\nWickham, H. (2010). A layered grammar of graphics.\nJournal of Computational and Graphical Statistics, 19(1), 3‚Äì28.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.1. Geometric Objects: geom_bar",
    "text": "1.7.1. Geometric Objects: geom_bar\nWant to see how frequently each category appears in your dataset? geom_bar() is your go-to tool for this.\nThe following code builds a bar chart that counts and displays the number of observations for each RACE in the dataset.\n\nggplot(data = exam_data,\n       aes(x = RACE, fill = RACE)) +\n  geom_bar() +\n  scale_fill_manual(values = c(\"Chinese\" = \"skyblue\",\n                               \"Malay\" = \"seagreen\",\n                               \"Indian\" = \"tomato\",\n                               \"Others\" = \"gold\"))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.2. Geometric Objects: geom_dotplot",
    "text": "1.7.2. Geometric Objects: geom_dotplot\nA dot plot is an effective way to display individual observations. Each dot represents a single data point and is stacked within bins along a continuous axis, typically the x-axis. This makes it a great choice for visualizing distributions while maintaining detail at the individual level.\nThe function geom_dotplot() from ggplot2 allows you to create dot plots with flexible options.\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚ö†Ô∏è Caution on Y-Axis Interpretation\n\n\n\nThe y-axis in dot plots simply shows how many dots are stacked. It doesn‚Äôt represent an actual numerical scale and may mislead if interpreted as such.\n\n\n\nEnhancing Dot Plot Clarity\nTo make your dot plot more accurate and aesthetically clear, you can:\n\nAdjust bin width to define horizontal spacing using binwidth\nRemove y-axis labels for cleaner presentation using scale_y_continuous()\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüß© What‚Äôs Happening Here?\n\n\n\n\nbinwidth = 2.5 ensures dots are grouped at consistent intervals.\nscale_y_continuous(NULL, breaks = NULL) removes the y-axis for a cleaner, more truthful visual.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.3. Geometric Objects",
    "text": "1.7.3. Geometric Objects\nBelow is a simple example using the MATHS scores from the exam_data dataset:\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\nThis creates a default histogram using 30 bins, which is often fine ‚Äî but not always ideal.\n\n\n\n\n\n\n‚ú® Customizing Your Bins\n\n\n\nTo make your histogram more insightful, adjust the bin size using either:\n\nbins = n: specify the number of bins\n\nbinwidth = w: specify the width of each bin\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 15)\n\n\n\n\n\n\n\n\nThis example reduces the number of bins to 15, giving a broader view of the data distribution.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.4. Modifying a geometric object by changing geom()",
    "text": "1.7.4. Modifying a geometric object by changing geom()\nAdjusting the appearance of histograms can improve clarity and highlight important trends. The following modifications demonstrate how to refine the default histogram:\n\nThe bins argument sets the number of intervals (e.g., 20 bins).\nThe fill argument defines the interior color of the bars (e.g., light blue).\nThe color argument specifies the border color for each bar (e.g., black).\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"light blue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyling Insight\n\n\n\nRefined styling parameters allow for clearer visual distinctions between data segments, enhancing overall interpretation without altering the underlying structure.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.5. Modifying a geometric object by changing aes()",
    "text": "1.7.5. Modifying a geometric object by changing aes()\nWhen using aes() to define aesthetics within ggplot2, visual elements can be dynamically adjusted based on variables in the dataset. In the example below, the fill aesthetic is mapped to the GENDER variable, resulting in differentiated colors for each gender group in the histogram.\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüí° Tip\n\n\n\nMapping aesthetics within aes() enables color, fill, and even transparency (alpha) to reflect group-specific values ‚Äî ideal for highlighting subgroup patterns in the data.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.6. Geometric Objects: geom-density()",
    "text": "1.7.6. Geometric Objects: geom-density()\ngeom_density() offers a smooth visual representation of a numeric distribution by applying kernel density estimation. It serves as a more polished alternative to histograms, particularly for continuous data with an underlying pattern.\nTo visualize the distribution of MATHS scores in the exam_data, a simple density plot can be constructed:\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThis produces a continuous curve that reflects the probability density of the data.\n\n\n\n\n\n\nTip\n\n\n\nFor grouped comparisons, map a grouping variable (e.g., GENDER) to the colour or fill aesthetic inside aes(). This will overlay separate density lines, making it easier to compare distributions.\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThis allows side-by-side visual analysis of score distributions for different gender groups, offering insights into performance patterns.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.7. Geometric Objects: geom_boxplot",
    "text": "1.7.7. Geometric Objects: geom_boxplot\nThe geom_boxplot() function is used to display the distribution of continuous data through five key summary statistics ‚Äî including the median, quartiles, and potential outliers.\nThis type of plot provides a clear overview of how data is spread across different groups. In the following example, the distribution of MATHS scores is shown across gender groups.\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe boxplot shows the interquartile range (IQR), median, and any individual outliers beyond the whiskers.\n\n\nNotched Boxplot Comparison\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nBelow is a version of the boxplot with the notch = TRUE option enabled:\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInterpretation Hint\n\n\n\nNon-overlapping notches suggest that the medians differ significantly between groups.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.8. Geometric Objects: geom_violin",
    "text": "1.7.8. Geometric Objects: geom_violin\nThe geom_violin() function provides a way to visualize data distribution through a mirrored density plot. Violin plots are especially useful when comparing multiple groups, as they combine the features of a boxplot with a kernel density estimate ‚Äî offering more insight into the shape of the distribution.\nUnlike traditional density curves that can become visually cluttered when overlayed, violin plots allow side-by-side comparisons of distributions, making it easier to interpret differences across categories.\nThe following example displays the distribution of MATHS scores grouped by gender:\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\nViolin plots are ideal for visualizing variations in data distributions while maintaining clarity ‚Äî especially when comparing multiple groups.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.9. Geometric Objects: geom_point()",
    "text": "1.7.9. Geometric Objects: geom_point()\nThe geom_point() function is a go-to for generating scatter plots, which are ideal for visualizing the relationship between two continuous variables.\nIn the example below, a scatterplot is constructed using MATHS and ENGLISH scores from the exam_data dataset. Each point represents a student, allowing visual inspection of trends or clusters in academic performance.\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case\n\n\n\nScatterplots are commonly used in correlation analysis and model diagnostics, offering an intuitive way to observe linear or non-linear relationships between variables.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.10. geom objects can be combined",
    "text": "1.7.10. geom objects can be combined\nMultiple geom_*() functions can be layered within a single ggplot() call to enhance the richness of a visualization.\nIn the following example, geom_boxplot() is used to summarize the distribution of Maths scores by gender, while geom_point() adds individual observations. The position = \"jitter\" argument helps avoid overplotting by slightly offsetting the points, and the size argument controls dot size.\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nCombining geom_boxplot() and geom_point() provides both a statistical summary and a granular view of the data. This layered approach improves interpretability by showing trends and outliers simultaneously.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.1. Working with stat()",
    "text": "1.8.1. Working with stat()\nThe example below shows a basic boxplot generated using geom_boxplot(). While it effectively displays the distribution and spread of the MATHS scores across genders, something important is missing ‚Äî the mean.\n\nggplot(data = exam_data,\n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe plot summarizes five key statistics (median, quartiles, and whiskers), but it does not show the average score ‚Äî a common value of interest when comparing groups.\n\n\n\n\n\n\nInsight\n\n\n\nBy default, geom_boxplot() does not display means. To include them, additional layers like stat_summary() can be added to overlay statistical measures such as the mean or standard deviation.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.2. Working with stat - the stat_summary() method",
    "text": "1.8.2. Working with stat - the stat_summary() method\nTo enhance a boxplot by explicitly displaying the mean values, the stat_summary() function is used. This method overrides the default geometric object and allows the addition of custom summary statistics, such as the mean, directly onto the plot.\n\nggplot(data = exam_data,\n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               colour = \"red\",\n               size = 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy this matters\n\n\n\nWhile boxplots highlight the median and spread of the data, visualizing the mean provides additional context‚Äîespecially useful for comparing central tendencies across groups.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.3. Working with stat - the geom() method",
    "text": "1.8.3. Working with stat - the geom() method\nAnother way to layer summary statistics onto a plot is by using a geom_() function while specifying the statistical transformation. In this example, geom_point() is used with stat = \"summary\" to display the mean value directly on top of each boxplot.\n\nggplot(data = exam_data,\n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",\n             fun = \"mean\",\n             colour = \"red\",\n             size = 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUsing geom() in combination with stat = ‚Äúsummary‚Äù offers flexibility to customize how summary values are represented‚Äîsuch as using different shapes, colors, or sizes.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.4. Adding a best fit curve on a scatterplot?",
    "text": "1.8.4. Adding a best fit curve on a scatterplot?\nTo better interpret the relationship between two continuous variables‚Äîsuch as Maths and English scores‚Äîa trend line can be added to a scatterplot. This helps illustrate the underlying pattern in the data more clearly.\nUsing geom_smooth() with Default Settings\nThe geom_smooth() function in ggplot2 adds a smooth curve to scatterplots. By default, it uses the loess method to estimate a trend line.\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default smoothing method applied here is loess, which fits a local polynomial regression.\n\n\nCustomizing the Smoothing Method To fit a linear regression line, the method can be explicitly set to lm (linear model). This is especially useful when the aim is to model a linear trend.\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5)\n\n\n\n\n\n\n\n\nThis configuration overlays a straight line that minimizes the squared differences between the observed and predicted values, giving a clear representation of linear correlation.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.1. Working with facet_wrap()",
    "text": "1.9.1. Working with facet_wrap()\nThe facet_wrap() function is used to break a dataset into a series of plots, each representing a subset of the data defined by a single variable. It arranges the plots in a 2D grid layout, making efficient use of screen space‚Äîespecially helpful when the display area is rectangular.\nThis method is ideal for visualizing the distribution of a variable across multiple categories.\nExample: Plotting Maths scores by class using facet_wrap(~ CLASS)\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nEach small panel reveals how Maths scores are distributed in each class, providing side-by-side insights for comparison.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.2. facet_grid() function",
    "text": "1.9.2. facet_grid() function\nThe facet_grid() function is used to generate a matrix of panels, organized by rows and columns based on one or two categorical variables. This method is most effective when all combinations of the variables exist in the dataset, ensuring a full grid layout.\nThis approach offers a structured way to visualize interactions between two factors simultaneously.\nExample: Generating a histogram of Maths scores, separated by CLASS using facet_grid().\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\nEach panel represents a different class, enabling a straightforward comparison of score distributions.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.1. Working with Coordinate",
    "text": "1.10.1. Working with Coordinate\nBy default, bar charts in ggplot2 are displayed in a vertical orientation. The example below uses geom_bar() to plot the distribution of the RACE variable.\n\nggplot(data = exam_data, \n       aes(x = RACE)) + \n  geom_bar()\n\n\n\n\n\n\n\n\nThe default behavior results in a vertical bar chart.\nTo change the orientation and produce a horizontal bar chart, the coord_flip() function can be added. This is especially useful when category labels on the x-axis are lengthy or when a horizontal format provides better readability.\n\nggplot(data = exam_data, \n       aes(x = RACE)) + \n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\nThe output now displays the bar chart in horizontal format.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.2. Changing the y- and x-axis range",
    "text": "1.10.2. Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, size = 0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, size = 0.5) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11.1. Working with theme",
    "text": "1.11.1. Working with theme\nHorizontal Bar Charts with Different Themes\n\ntheme_gray()theme_classic()theme_minimal()\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nEach theme alters the chart‚Äôs visual presentation while maintaining clarity and focus. Toggle the tabs above to preview how different styling choices influence readability and aesthetics.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bin-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bin-data",
    "title": "Take-home Exercise 1",
    "section": "4.1. Bin Data",
    "text": "4.1. Bin Data\n\n# Step 1: Define bins and labels\nage_breaks &lt;- seq(0, 90, by = 5) # creates: 0, 5, 10, ..., 90\nage_labels &lt;- c(paste(seq(0, 85, 5), seq(4, 89, 5), sep = \"-\"), \"90+\")\n\n# Step 2: Apply binning\npop_data &lt;- pop_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),  # ensure Age is numeric\n    AgeGroup = cut(\n      Age,\n      breaks = c(age_breaks, Inf),      # add Inf to cover 90+\n      labels = age_labels,\n      right = FALSE                     # include lower bound\n    )\n  )\n\n\n\n\n\n\nPA\nSZ\nAge\nSex\nPop\nTime\nAgeGroup\n\n\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nMales\n10\n2024\n0-4\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nFemales\n10\n2024\n0-4\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nMales\n10\n2024\n0-4\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nFemales\n10\n2024\n0-4\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nMales\n10\n2024\n0-4\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nFemales\n10\n2024\n0-4",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-map-and-join-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-map-and-join-data",
    "title": "Take-home Exercise 1",
    "section": "8.1. Importing map and join data",
    "text": "8.1. Importing map and join data\n\nsg_map &lt;- st_read(\"data/MP14_PLNG_AREA_WEB_PL.shp\")\n\nReading layer `MP14_PLNG_AREA_WEB_PL' from data source \n  `/Users/summernguyen/Documents/summernguyenn/ISSS608-VAA/Take-home_Ex/Take-home_Ex01/data/MP14_PLNG_AREA_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 55 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmap_data &lt;- left_join(sg_map, pop_data, by = c(\"PLN_AREA_N\" = \"PA\"))\n\nsg_map_sub &lt;- st_read(\"data/MP14_SUBZONE_WEB_PL.shp\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/summernguyen/Documents/summernguyenn/ISSS608-VAA/Take-home_Ex/Take-home_Ex01/data/MP14_SUBZONE_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmap_data_sub &lt;- left_join(sg_map_sub, pop_data, by = c(\"SUBZONE_N\" = \"SZ\"))",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-gender-distribution-with-interactivity",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-gender-distribution-with-interactivity",
    "title": "Take-home Exercise 1",
    "section": "5.2. Population and Gender Distribution with Interactivity",
    "text": "5.2. Population and Gender Distribution with Interactivity\n\n# Summarize population by planning area and year\npop_summary &lt;- pop_data %&gt;%\n  mutate(PA = toupper(trimws(PA))) %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = Sex, values_from = Pop) %&gt;%\n  mutate(\n    Total = Males + Females\n  )\n\nsg_map &lt;- sg_map %&gt;%\n  mutate(PLN_AREA_N = toupper(trimws(PLN_AREA_N)))\n\n# Join spatial with population\nmap_data &lt;- left_join(sg_map, pop_summary, by = c(\"PLN_AREA_N\" = \"PA\"))\n\n# Plot with ggplot\np &lt;- ggplot(map_data) +\n  geom_sf(\n    aes(\n      fill = Total,\n      text = paste(\n        \"Planning Area:\", PLN_AREA_N, \"&lt;br&gt;\",\n        \"Total:\", Total, \"&lt;br&gt;\",\n        \"Male:\", Males, \"&lt;br&gt;\",\n        \"Female:\", Females\n      )\n    ),\n    color = \"black\", size = 0.05\n  ) +\n  geom_sf_text(aes(label = PLN_AREA_N), size = 1.0, color = \"black\") + \n  scale_fill_gradientn(\n  colors = c(\n    \"#FFF5EB\", \n    \"#FEE6CE\", \n    \"#FDD0A2\",  \n    \"#FDAE6B\", \n    \"#FD8D3C\",  \n    \"#E6550D\", \n    \"#A63603\" \n  ),\n  name = \"Population Density\"\n) +\n  labs(title = \"Resident Population by Planning Area\") +\n  theme_minimal() +\ntheme(\n  axis.text = element_blank(),\n  axis.ticks = element_blank(),\n  axis.title = element_blank(),\n  panel.grid = element_blank(),\n  panel.border = element_blank(),\n  plot.title = element_text(size = 16, face = \"bold\")\n)\n\n\n# Convert to interactive plotly\nggplotly(p, tooltip = \"text\")\n\nSingapore: Resident Population by Planning Area\n\n\n\n\n\n\nTip!\n\n\n\n\nHover over the regions to view the population and gender distribution\nUse Zoom in/ Zoom Out / Pan /Box Select to better view the map",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-gender-distribution-by-planning-region-with-interactivity",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-gender-distribution-by-planning-region-with-interactivity",
    "title": "Take-home Exercise 1",
    "section": "6.2. Population and Gender Distribution by Planning Region with Interactivity",
    "text": "6.2. Population and Gender Distribution by Planning Region with Interactivity\n\nBy Planning AreaBy SubzoneThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReplace \"PLN_AREA_N\" and \"PA\" by \"SUBZONE_N\" and \"SZ\" to generate graph by Subzone\n\n\n\n# Summarize population by planning area and year\npop_summary &lt;- pop_data %&gt;%\n  mutate(PA = toupper(trimws(PA))) %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = Sex, values_from = Pop) %&gt;%\n  mutate(\n    Total = Males + Females\n  )\n\nsg_map &lt;- sg_map %&gt;%\n  mutate(PLN_AREA_N = toupper(trimws(PLN_AREA_N)))\n\n# Join spatial with population\nmap_data &lt;- left_join(sg_map, pop_summary, by = c(\"PLN_AREA_N\" = \"PA\"))\n\n# Plot with ggplot\np &lt;- ggplot(map_data) +\n  geom_sf(\n    aes(\n      fill = Total,\n      text = paste(\n        \"Planning Area:\", PLN_AREA_N, \"&lt;br&gt;\",\n        \"Total:\", Total, \"&lt;br&gt;\",\n        \"Male:\", Males, \"&lt;br&gt;\",\n        \"Female:\", Females\n      )\n    ),\n    color = \"black\", size = 0.05\n  ) +\n  geom_sf_text(aes(label = PLN_AREA_N), size = 1.0, color = \"black\") + \n  scale_fill_gradientn(\n  colors = c(\n    \"#FFF5EB\", \n    \"#FEE6CE\", \n    \"#FDD0A2\",  \n    \"#FDAE6B\", \n    \"#FD8D3C\",  \n    \"#E6550D\", \n    \"#A63603\" \n  ),\n  name = \"Population Density\"\n) +\n  labs(\n    title = \"Population Density by Planning Region\",\n    subtitle = \"Singapore (2024)\",\n    caption = \"Source: Singapore Department of Statistics\"\n  ) +\n  theme_minimal() +\ntheme(\n  axis.text = element_blank(),\n  axis.ticks = element_blank(),\n  axis.title = element_blank(),\n  panel.grid = element_blank(),\n  panel.border = element_blank(),\n  plot.title = element_text(size = 16, face = \"bold\")\n)\n\n\n# Convert to interactive plotly\nggplotly(p, tooltip = \"text\")",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#binning-age",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#binning-age",
    "title": "Take-home Exercise 1",
    "section": "4.3. Binning Age",
    "text": "4.3. Binning Age\na. Into ranges\nThe continuous Age variable is transformed into categorical age groups. This makes demographic patterns across broader age ranges easier to observe and compare.\n\nage_breaks &lt;- seq(0, 90, by = 5)\nage_labels &lt;- c(paste(seq(0, 80, 5), seq(4, 84, 5), sep = \"-\"), \"85-89\", \"90+\")\n\npop_data &lt;- pop_data %&gt;%\n  mutate(\n    Age = ifelse(Age == \"90+\", 90, Age),\n    Age = as.numeric(Age),\n    AgeGroup = cut(\n      Age,\n      breaks = c(seq(0, 90, 5), Inf),\n      labels = age_labels,\n      right = FALSE\n    )\n  )\n\nb. Into Age categorization\nThe continuous Age variable is categorized into meaningful demographic age groups. These age bands help standardize population analysis and ensure comparability across studies and time periods.\n\n\n\n\n\n\nNote\n\n\n\nThe age categorization is based on the statistical standards issued by the Singapore Department of Statistics\n\n\n\npop_data &lt;- pop_data %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeCategory = case_when(\n      Age &lt; 15 ~ \"Child\",\n      Age &gt;= 15 & Age &lt; 65 ~ \"Working-Age\",\n      Age &gt;= 65 & Age &lt; 75 ~ \"Young-Old\",\n      Age &gt;= 75 & Age &lt; 85 ~ \"Medium-Old\",\n      Age &gt;= 85 ~ \"Oldest-Old\"\n    )\n  )",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#binning-population",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#binning-population",
    "title": "Take-home Exercise 1",
    "section": "4.2. Binning Population",
    "text": "4.2. Binning Population\n\npop_breaks &lt;- c(0, 10, 30, 50, 100, 200, 500, Inf)\npop_labels &lt;- c(\"1‚Äì10\", \"11‚Äì30\", \"31‚Äì50\", \"51‚Äì100\", \"101‚Äì200\", \"201‚Äì500\", \"500+\")\n\npop_data &lt;- pop_data %&gt;%\n  mutate(\n    Pop_bin = cut(\n      Pop,\n      breaks = pop_breaks,\n      labels = pop_labels,\n      right = FALSE\n    )\n  )",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-gender-distribution-by-planning-region-with-interactivity-and-hover-effect",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-gender-distribution-by-planning-region-with-interactivity-and-hover-effect",
    "title": "Take-home Exercise 1",
    "section": "8.2. Population and Gender Distribution by Planning Region with Interactivity and Hover Effect",
    "text": "8.2. Population and Gender Distribution by Planning Region with Interactivity and Hover Effect\n\n\n\n\n\n\nTip!\n\n\n\n\nInteractivity: Hover over the regions to view the population and gender distribution\nUse Zoom in/ Zoom Out / Pan /Box Select to better view the map\n\n\n\n\nBy Planning AreaBy SubzoneThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Summarize population by planning area\npop_summary &lt;- pop_data %&gt;%\n  mutate(PA = toupper(trimws(PA))) %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = Sex, values_from = Pop) %&gt;%\n  mutate(Total = Males + Females)\n\n# Join map with population\nmap_data &lt;- sg_map %&gt;%\n  mutate(PLN_AREA_N = toupper(trimws(PLN_AREA_N))) %&gt;%\n  left_join(pop_summary, by = c(\"PLN_AREA_N\" = \"PA\"))\n\n# Plot with ggiraph\np &lt;- ggplot(map_data) +\n  geom_sf_interactive(\n    aes(\n      fill = Total,\n      tooltip = paste0(\n        \"Planning Area: \", PLN_AREA_N, \"\\n\",\n        \"Total: \", Total, \"\\n\",\n        \"Male: \", Males, \"\\n\",\n        \"Female: \", Females\n      ),\n      data_id = PLN_AREA_N \n    ),\n    color = \"black\", size = 0.05\n  ) +\n  geom_sf_text(aes(label = PLN_AREA_N), size = 1, color = \"black\") +\n  scale_fill_gradientn(\n    colors = c(\"#FFF5EB\", \"#FEE6CE\", \"#FDD0A2\", \"#FDAE6B\", \"#FD8D3C\", \"#E6550D\", \"#A63603\"),\n    name = \"Population Density\",\n    labels = scales::comma\n  ) +\n  labs(\n    title = \"Population Density by Planning Region\",\n    subtitle = \"Singapore (2024)\",\n    caption = \"Source: Singapore Department of Statistics\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    panel.grid = element_blank(),\n    panel.border = element_blank(),\n    plot.title = element_text(size = 16, face = \"bold\")\n  )\n\n# Interactivity with highlight on hover\ngirafe(\n  ggobj = p,\n  width_svg = 10,\n  height_svg = 8,\n  options = list(\n    opts_hover(css = \"stroke:#000000;stroke-width:1.5px;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")  # blur non-hovered zones\n  )\n)\n\nReplace \"PLN_AREA_N\" and \"PA\" by \"SUBZONE_N\" and \"SZ\" to generate graph by Subzone",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-gender-distribution-by-subzone-with-interactivity",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-and-gender-distribution-by-subzone-with-interactivity",
    "title": "Take-home Exercise 1",
    "section": "5.4. Population and Gender Distribution by SubZone with Interactivity",
    "text": "5.4. Population and Gender Distribution by SubZone with Interactivity\n\n# Summarize population by planning area and year\npop_summary &lt;- pop_data %&gt;%\n  mutate(SZ = toupper(trimws(SZ))) %&gt;%\n  group_by(SZ, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = Sex, values_from = Pop) %&gt;%\n  mutate(\n    Total = Males + Females\n  )\n\nsg_map_sub &lt;- sg_map_sub %&gt;%\n  mutate(SUBZONE_N = toupper(trimws(SUBZONE_N)))\n\n# Join spatial with population\nmap_data_sub &lt;- left_join(sg_map_sub, pop_summary, by = c(\"SUBZONE_N\" = \"SZ\"))\n\n# Plot with ggplot\np &lt;- ggplot(map_data_sub) +\n  geom_sf(\n    aes(\n      fill = Total,\n      text = paste(\n        \"Subzone:\", SUBZONE_N, \"&lt;br&gt;\",\n        \"Total:\", Total, \"&lt;br&gt;\",\n        \"Male:\", Males, \"&lt;br&gt;\",\n        \"Female:\", Females\n      )\n    ),\n    color = \"black\", size = 0.05\n  ) +\n  geom_sf_text(aes(label = SUBZONE_N), size = 1.0, color = \"black\") + \n  scale_fill_gradientn(\n  colors = c(\n    \"#FFF5EB\", \n    \"#FEE6CE\", \n    \"#FDD0A2\",  \n    \"#FDAE6B\", \n    \"#FD8D3C\",  \n    \"#E6550D\", \n    \"#A63603\" \n  ),\n  name = \"Population Density\"\n) +\n  theme_minimal() +\ntheme(\n  axis.text = element_blank(),\n  axis.ticks = element_blank(),\n  axis.title = element_blank(),\n  panel.grid = element_blank(),\n  panel.border = element_blank(),\n  plot.title = element_text(size = 16, face = \"bold\")\n)\n\n\n# Convert to interactive plotly\nggplotly(p, tooltip = \"text\")\n\nSingapore: Resident Population by Planning Area\n\n\n\n\n\n\nTip!\n\n\n\n\nInteractivity: Hover over the regions to view the population and gender distribution\nUse Zoom in/ Zoom Out / Pan /Box Select to better view the map",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-missing-values-and-remove-if-any",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#checking-missing-values-and-remove-if-any",
    "title": "Take-home Exercise 1",
    "section": "4.1. Checking missing values and remove if any",
    "text": "4.1. Checking missing values and remove if any\nThe following code snippet checks for missing values in the dataset and calculates the total number and proportion of missing entries:\n\nprint(paste('There are ', sum(is.na(data)), ' missing values representing ', \n            round(100*sum(is.na(data))/(nrow(data)*ncol(data)), 5), '% of the total.'))\n\n[1] \"There are  0  missing values representing   % of the total.\"\n\n\nThe dataset contains no missing values. Therefore, no imputation or removal actions are required at this stage.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#binning-area-into-regional-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#binning-area-into-regional-level",
    "title": "Take-home Exercise 1",
    "section": "4.3. Binning Area into Regional level",
    "text": "4.3. Binning Area into Regional level\nTo support higher-level geographical analysis, each Planning Area is categorized into a broader Region based on Singapore‚Äôs regional classification. This allows for meaningful aggregation, comparison, and visualization of population patterns at the regional level.\n\n\n\n\n\n\nNote\n\n\n\nThe classification follows the official grouping of areas by region as referenced on Wikipedia: Regions of Singapore\n\n\n\npop_data &lt;- pop_data %&gt;%\n  mutate(\n    Region = case_when(\n      PA %in% c(\"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n                \"Marina East\", \"Marina South\", \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\",\n                \"Orchard\", \"Outram\", \"Queenstown\", \"Dover\", \"Ghim Moh\", \"River Valley\", \"Rochor\",\n                \"Singapore River\", \"Southern Islands\", \"Straits View\", \"Tanglin\", \"Toa Payoh\") ~ \"Central\",\n      \n      PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Pasir Ris\", \"Paya Lebar\", \"Tampines\") ~ \"East\",\n      \n      PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\",\n                \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North\",\n      \n      PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\",\n                \"Sengkang\", \"Serangoon\") ~ \"Northeast\",\n      \n      TRUE ~ \"Other\"\n    )\n  )",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1.2.-singapore-population-by-age-cohort",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1.2.-singapore-population-by-age-cohort",
    "title": "Take-home Exercise 1",
    "section": "5.3. Insight 1.2. Singapore population by age cohort",
    "text": "5.3. Insight 1.2. Singapore population by age cohort\n\nPopulation (thousands)Percentage of PopulationThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramid_data &lt;- pop_data %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8) +\n  coord_flip() +\n  scale_y_continuous(\n    breaks = seq(-150000, 150000, 50000),\n    labels = abs(seq(-150, 150, 50))\n  ) +\n  scale_fill_manual(values = c(\"Females\" = \"lightpink2\", \"Males\" = \"steelblue3\")) +\n  labs(\n    title = \"Singapore Residents Pyramid by Age Cohort, 2024\",\n    x = \"Age group\",\n    y = \"Population in thousands\",\n    fill = \"Gender\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    axis.text.y = element_text(size = 10),\n    axis.title.x = element_text(margin = margin(t = 10))\n  )\n\n\n\n\nThe population pyramid shows a middle-aged dominant structure, with most residents between 30‚Äì59 years. The younger age groups (0‚Äì14) are smaller, indicating a declining birth rate.\nGender distribution is generally balanced, but females outnumber males in older age groups, reflecting longer female life expectancy.\nOverall, the chart highlights Singapore‚Äôs aging population and potential pressure on future workforce and elderly care systems.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1.1-overview---singapore-population-by-gender-and-age",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1.1-overview---singapore-population-by-gender-and-age",
    "title": "Take-home Exercise 1",
    "section": "5.2 Insight 1.1: Overview - Singapore population by gender and age",
    "text": "5.2 Insight 1.1: Overview - Singapore population by gender and age\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npop_by_age_gender &lt;- pop_data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Pop), .groups = \"drop\")\n\npop_by_age &lt;- pop_data %&gt;%\n  group_by(AgeGroup) %&gt;%\n  summarise(Population = sum(Pop), .groups = \"drop\")\n\nggplot() +\n  geom_bar(data = pop_by_age, aes(x = AgeGroup, y = Population), \n           stat = 'identity', alpha = 0.3, fill = 'grey') +\n  geom_bar(data = pop_by_age_gender, \n           aes(x = AgeGroup, y = Population, fill = Sex), \n           stat = 'identity') +\n  scale_fill_manual(values = c('Females' = 'lightpink2', 'Males' = 'steelblue3')) +\n  facet_grid(~Sex) +\n  scale_x_discrete(labels = NULL) +\n  scale_y_continuous(\n    breaks = c(seq(0, 400000, 50000)),\n    labels = c(seq(0, 400, 50))\n  ) +\n  theme_minimal() +\n  ggtitle(\"Singapore Population by Gender and Age Group, 2024\") +\n  xlab(\"Age groups\") +\n  ylab(\"Population in thousands\")\n  )\n\n\n\n\nThe grey background bars illustrate the overall population distribution by age groups, revealing a skew towards younger cohorts ‚Äî with over 85% of the population below age 65.\nWhen comparing gender-specific age structures, it is evident that females have a greater representation in the older age brackets, highlighting higher life expectancy among women.\nThis demographic pattern has implications for healthcare planning and social support systems, particularly in addressing the needs of an ageing female population.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.1-population-size-by-planning-areas",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.1-population-size-by-planning-areas",
    "title": "Take-home Exercise 1",
    "section": "6.1 Insight 2.1: Population size by Planning Areas",
    "text": "6.1 Insight 2.1: Population size by Planning Areas\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\npop_summary &lt;- pop_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop) / 1000, .groups = \"drop\") \n\np &lt;- ggplot(pop_summary, aes(x = reorder(PA, -Pop), y = Pop)) +\n  geom_point_interactive(\n    aes(size = Pop, color = Pop,\n        tooltip = paste0(PA, \"\\nPopulation: \", round(Pop, 1), \"K\"),\n        data_id = PA),\n    alpha = 0.8\n  ) +\n  scale_size(range = c(3, 12)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkred\") +\n  labs(\n    title = \"Population by Planning Area (in Thousands)\",\n    x = \"Planning Area\", y = \"Population (Thousands)\",\n    color = \"Density\", size = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n\ngirafe(ggobj = p)\n\n\n\n\nThis bubble chart shows population by planning area in Singapore:\n\nLarger bubbles mean higher population (in thousands).\nDarker red bubbles show higher population density.\nTampines, Bedok, and Jurong West are the most populated and dense.\nWestern Islands and Tuas have the lowest population and density.\nThe population is concentrated in a few key areas.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2-population-size-by-regionl-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2-population-size-by-regionl-level",
    "title": "Take-home Exercise 1",
    "section": "6.2. Insight 2.2: Population size by regionl level",
    "text": "6.2. Insight 2.2: Population size by regionl level\n\n# Summarize population by Region\nregion_summary &lt;- pop_data %&gt;%\n  filter(!is.na(Region)) %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Pop = sum(Pop) / 1000, .groups = \"drop\")  # Convert to thousands\n\n# Plot interactive bubble chart by Region\np &lt;- ggplot(region_summary, aes(x = reorder(Region, -Pop), y = Pop)) +\n  geom_point_interactive(\n    aes(size = Pop, color = Pop,\n        tooltip = paste0(Region, \"\\nPopulation: \", round(Pop, 1), \"K\"),\n        data_id = Region),\n    alpha = 0.8\n  ) +\n  scale_size(range = c(4, 14)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkred\") +\n  labs(\n    title = \"Population by Region (in Thousands)\",\n    x = \"Region\", y = \"Population (Thousands)\",\n    color = \"Density\", size = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5),\n    axis.title = element_text(size = rel(1), face = \"bold\"),\n    plot.title = element_text(size = rel(1.2), face = \"bold\")\n  )\n\n# Render interactive chart\ngirafe(ggobj = p)",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2-population-distribution-by-planning-area-and-age",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2-population-distribution-by-planning-area-and-age",
    "title": "Take-home Exercise 1",
    "section": "6.3. Insight 2.2: Population distribution by planning area and age",
    "text": "6.3. Insight 2.2: Population distribution by planning area and age\nThe comparison between the top 9 most and least populated planning areas in Singapore reveals distinct demographic patterns:\na. Top 9 highest population\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop9_pa &lt;- pop_data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\") %&gt;%\n  slice_max(order_by = Total, n = 9) %&gt;%\n  pull(PA)\n\n\nagecat_pct &lt;- pop_data %&gt;%\n  filter(PA %in% top9_pa, !is.na(AgeCategory)) %&gt;%\n  group_by(PA, AgeCategory) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Pct = Pop / sum(Pop) * 100)\n\nggplot(agecat_pct, aes(x = \"\", y = Pct, fill = AgeCategory)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_wrap(~ PA, ncol = 3) +\n  theme_void() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 9)\n  ) +\n  labs(\n    title = \"Age Group Proportions by Planning Area (Top 9 highest Population)\",\n    fill = \"Age Category\"\n  )\n\n\n\n\nThese areas show a diverse age composition. The Working-Age group still dominates, but there are notable proportions of Children and Young-Old groups, indicating that these are family-oriented residential zones. Areas like Punggol and Choa Chu Kang show a relatively higher share of children, suggesting younger families and possibly newer housing developments attracting first-time homeowners.\nb. Top 9 lowest population (Pop &gt; 0)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nleast9_pa &lt;- pop_data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total &gt; 0) %&gt;%\n  slice_min(order_by = Total, n = 9) %&gt;%\n  pull(PA)\n\nagecat_pct_least &lt;- pop_data %&gt;%\n  filter(PA %in% least9_pa, !is.na(AgeCategory)) %&gt;%\n  group_by(PA, AgeCategory) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Pct = Pop / sum(Pop) * 100)\n\nggplot(agecat_pct_least, aes(x = \"\", y = Pct, fill = AgeCategory)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_wrap(~ PA, ncol = 3) +\n  theme_void() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 9)\n  ) +\n  labs(\n    title = \"Age Group Proportions by Planning Area (Top 9 Least Populated, Pop &gt; 0)\",\n    fill = \"Age Category\"\n  )\n\n\n\n\nIn contrast, these areas are overwhelmingly populated by Working-Age adults, with minimal presence of children or elderly. In some cases (like Seletar or Museum), the charts show almost 100% working-age, suggesting institutional, industrial, or commercial use rather than residential. The absence of dependents (children or older adults) highlights a limited long-term residential appeal or purpose-built land use.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#binning-areas-into-regional-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#binning-areas-into-regional-level",
    "title": "Take-home Exercise 1",
    "section": "4.4. Binning Areas into Regional level",
    "text": "4.4. Binning Areas into Regional level\nTo support higher-level geographical analysis, each Planning Area is categorized into a broader Region based on Singapore‚Äôs regional classification. This allows for meaningful aggregation, comparison, and visualization of population patterns at the regional level.\n\n\n\n\n\n\nNote\n\n\n\nThe classification follows the official grouping of areas by region as referenced on Wikipedia: Regions of Singapore\n\n\n\npop_data &lt;- pop_data %&gt;%\n  mutate(\n    Region = case_when(\n      PA %in% c(\"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n                \"Marina East\", \"Marina South\", \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\",\n                \"Orchard\", \"Outram\", \"Queenstown\", \"Dover\", \"Ghim Moh\", \"River Valley\", \"Rochor\",\n                \"Singapore River\", \"Southern Islands\", \"Straits View\", \"Tanglin\", \"Toa Payoh\") ~ \"Central\",\n      \n      PA %in% c(\"Bedok\", \"Changi\", \"Changi Bay\", \"Pasir Ris\", \"Paya Lebar\", \"Tampines\") ~ \"East\",\n      \n      PA %in% c(\"Central Water Catchment\", \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\",\n                \"Sungei Kadut\", \"Woodlands\", \"Yishun\") ~ \"North\",\n      \n      PA %in% c(\"Ang Mo Kio\", \"Hougang\", \"North-Eastern Islands\", \"Punggol\", \"Seletar\",\n                \"Sengkang\", \"Serangoon\") ~ \"Northeast\",\n      \n      TRUE ~ \"West\"\n    )\n  )",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2-population-size-by-regional-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2-population-size-by-regional-level",
    "title": "Take-home Exercise 1",
    "section": "6.2. Insight 2.2: Population size by regional level",
    "text": "6.2. Insight 2.2: Population size by regional level\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nregion_summary &lt;- pop_data %&gt;%\n  filter(!is.na(Region)) %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Pop = sum(Pop) / 1000, .groups = \"drop\")  # Convert to thousands\n\np &lt;- ggplot(region_summary, aes(x = reorder(Region, -Pop), y = Pop)) +\n  geom_point_interactive(\n    aes(size = Pop, color = Pop,\n        tooltip = paste0(Region, \"\\nPopulation: \", round(Pop, 1), \"K\"),\n        data_id = Region),\n    alpha = 0.8\n  ) +\n  scale_size(range = c(4, 14)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkred\") +\n  labs(\n    title = \"Population by Region (in Thousands)\",\n    x = \"Region\", y = \"Population (Thousands)\",\n    color = \"Density\", size = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5),\n    axis.title = element_text(size = rel(1), face = \"bold\"),\n    plot.title = element_text(size = rel(1.2), face = \"bold\")\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 7,   \n  height_svg = 6     \n)\n\n\n\n\nThe chart displays the population size across five Singapore regions:\n\nNortheast, Central, and Other regions have the highest populations, each nearing or exceeding 950K, as shown by their large bubble size and dark color.\nEast region follows, with a moderate population around 710K.\nNorth region has the lowest population, approximately 600K, evident from its smaller, lighter-colored bubble.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2.-age-structure-composition-by-planning-area-ternary-plot",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2.-age-structure-composition-by-planning-area-ternary-plot",
    "title": "Take-home Exercise 1",
    "section": "6.3. Insight 2.2. Age Structure Composition by Planning Area (Ternary Plot)",
    "text": "6.3. Insight 2.2. Age Structure Composition by Planning Area (Ternary Plot)\n\nternary_data &lt;- pop_data %&gt;%\n  filter(!is.na(AgeCategory)) %&gt;%\n  mutate(AgeGroup = case_when(\n    AgeCategory == \"Child\" ~ \"Young\",\n    AgeCategory == \"Working-Age\" ~ \"WorkingAge\",\n    AgeCategory %in% c(\"Young-Old\", \"Medium-Old\", \"Oldest-Old\") ~ \"Old\"\n  )) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  tidyr::pivot_wider(names_from = AgeGroup, values_from = Pop, values_fill = 0) %&gt;%\n  mutate(Total = Young + WorkingAge + Old,\n         Young_pct = Young / Total,\n         WorkingAge_pct = WorkingAge / Total,\n         Old_pct = Old / Total)\n\nggtern(data = ternary_data,\n       aes(x = Young_pct, y = WorkingAge_pct, z = Old_pct,\n           color = PA, size = Total)) +\n  geom_point(alpha = 0.7) +\n  labs(\n    title = \"Ternary Plot of Demographic Structure by Planning Area\",\n  ) +\n  theme_tropical() +\n  guides(size = \"none\") +  # remove the size legend\n  theme(\n    legend.position = \"bottom\",        # move legend to the left\n    legend.justification = \"center\", # center it vertically\n    legend.direction = \"vertical\",   # keep the layout vertical\n    plot.title = element_text(hjust = 0.5)  # center title\n  )",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.3.-population-distribution-by-planning-area-and-age",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.3.-population-distribution-by-planning-area-and-age",
    "title": "Take-home Exercise 1",
    "section": "6.4. Insight 2.3. Population distribution by planning area and age",
    "text": "6.4. Insight 2.3. Population distribution by planning area and age\nThe comparison between the top 9 most and least populated planning areas in Singapore reveals distinct demographic patterns:\na. Top 9 highest population\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop9_pa &lt;- pop_data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\") %&gt;%\n  slice_max(order_by = Total, n = 9) %&gt;%\n  pull(PA)\n\n\nagecat_pct &lt;- pop_data %&gt;%\n  filter(PA %in% top9_pa, !is.na(AgeCategory)) %&gt;%\n  group_by(PA, AgeCategory) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Pct = Pop / sum(Pop) * 100)\n\nggplot(agecat_pct, aes(x = \"\", y = Pct, fill = AgeCategory)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_wrap(~ PA, ncol = 3) +\n  theme_void() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 9)\n  ) +\n  labs(\n    title = \"Age Group Proportions by Planning Area (Top 9 highest Population)\",\n    fill = \"Age Category\"\n  )\n\n\n\n\nThese areas show a diverse age composition. The Working-Age group still dominates, but there are notable proportions of Children and Young-Old groups, indicating that these are family-oriented residential zones. Areas like Punggol and Choa Chu Kang show a relatively higher share of children, suggesting younger families and possibly newer housing developments attracting first-time homeowners.\nb. Top 9 lowest population (Pop &gt; 0)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nleast9_pa &lt;- pop_data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total &gt; 0) %&gt;%\n  slice_min(order_by = Total, n = 9) %&gt;%\n  pull(PA)\n\nagecat_pct_least &lt;- pop_data %&gt;%\n  filter(PA %in% least9_pa, !is.na(AgeCategory)) %&gt;%\n  group_by(PA, AgeCategory) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Pct = Pop / sum(Pop) * 100)\n\nggplot(agecat_pct_least, aes(x = \"\", y = Pct, fill = AgeCategory)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_wrap(~ PA, ncol = 3) +\n  theme_void() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 9)\n  ) +\n  labs(\n    title = \"Age Group Proportions by Planning Area (Top 9 Least Populated, Pop &gt; 0)\",\n    fill = \"Age Category\"\n  )\n\n\n\n\nIn contrast, these areas are overwhelmingly populated by Working-Age adults, with minimal presence of children or elderly. In some cases (like Seletar or Museum), the charts show almost 100% working-age, suggesting institutional, industrial, or commercial use rather than residential. The absence of dependents (children or older adults) highlights a limited long-term residential appeal or purpose-built land use.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1.1-overall-distribution-of-singapores-population-by-gender-and-age-2024",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1.1-overall-distribution-of-singapores-population-by-gender-and-age-2024",
    "title": "Take-home Exercise 1",
    "section": "5.2 Insight 1.1: Overall Distribution of Singapore‚Äôs Population by Gender and Age, 2024",
    "text": "5.2 Insight 1.1: Overall Distribution of Singapore‚Äôs Population by Gender and Age, 2024\n\nThe graphThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npop_by_age_gender &lt;- pop_data %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Pop), .groups = \"drop\")\n\npop_by_age &lt;- pop_data %&gt;%\n  group_by(AgeGroup) %&gt;%\n  summarise(Population = sum(Pop), .groups = \"drop\")\n\nggplot() +\n  geom_bar(data = pop_by_age, aes(x = AgeGroup, y = Population), \n           stat = 'identity', alpha = 0.3, fill = 'grey') +\n  geom_bar(data = pop_by_age_gender, \n           aes(x = AgeGroup, y = Population, fill = Sex), \n           stat = 'identity') +\n  scale_fill_manual(values = c('Females' = 'lightpink2', 'Males' = 'steelblue3')) +\n  facet_grid(~Sex) +\n  scale_x_discrete(labels = NULL) +\n  scale_y_continuous(\n    breaks = c(seq(0, 400000, 50000)),\n    labels = c(seq(0, 400, 50))\n  ) +\n  theme_minimal() +\n  ggtitle(\"Singapore Population by Gender and Age Group, 2024\") +\n  xlab(\"Age groups\") +\n  ylab(\"Population in thousands\")\n  )\n\n\n\n\n\nOverall age structure: The grey background bars illustrate the total population across age groups, revealing a skew towards younger cohorts ‚Äî with over 85% of the population below age 65.\nFemales dominance in older age: When comparing gender-specific age structures, it is evident that females have a greater representation in the older age brackets, highlighting higher life expectancy among women.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1.2.-singapores-population-by-age-cohorts-a-comparative-view",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1.2.-singapores-population-by-age-cohorts-a-comparative-view",
    "title": "Take-home Exercise 1",
    "section": "5.3. Insight 1.2. Singapore‚Äôs Population by Age Cohorts: A Comparative View",
    "text": "5.3. Insight 1.2. Singapore‚Äôs Population by Age Cohorts: A Comparative View\n\nPopulation (thousands)Percentage of PopulationThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npyramid_data &lt;- pop_data %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8) +\n  coord_flip() +\n  scale_y_continuous(\n    breaks = seq(-150000, 150000, 50000),\n    labels = abs(seq(-150, 150, 50))\n  ) +\n  scale_fill_manual(values = c(\"Females\" = \"lightpink2\", \"Males\" = \"steelblue3\")) +\n  labs(\n    title = \"Singapore Residents Pyramid by Age Cohort, 2024\",\n    x = \"Age group\",\n    y = \"Population in thousands\",\n    fill = \"Gender\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    axis.text.y = element_text(size = 10),\n    axis.title.x = element_text(margin = margin(t = 10))\n  )\n\n\n\n\n\nWorking-age concentration: The largest population segments fall within the 25‚Äì54 age range, indicating a strong labor force presence.\nLower birth rate signal: The narrow base (ages 0‚Äì14) points to a decline in birth rates, which may pose challenges for future demographic sustainability.\nBalanced young-to-middle age cohorts: From ages 0 to 60, the pyramid shows almost equal numbers of males and females, suggesting balanced gender distribution in most age groups.\nGender disparity at the top: Starting from age 75 and above, there is a visible tilt toward females, again emphasizing greater longevity among women.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.1-population-size-across-singapores-planning-areas",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.1-population-size-across-singapores-planning-areas",
    "title": "Take-home Exercise 1",
    "section": "6.1 Insight 2.1: Population Size Across Singapore‚Äôs Planning Areas",
    "text": "6.1 Insight 2.1: Population Size Across Singapore‚Äôs Planning Areas\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\npop_summary &lt;- pop_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop) / 1000, .groups = \"drop\") \n\np &lt;- ggplot(pop_summary, aes(x = reorder(PA, -Pop), y = Pop)) +\n  geom_point_interactive(\n    aes(size = Pop, color = Pop,\n        tooltip = paste0(PA, \"\\nPopulation: \", round(Pop, 1), \"K\"),\n        data_id = PA),\n    alpha = 0.8\n  ) +\n  scale_size(range = c(3, 12)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkred\") +\n  labs(\n    title = \"Population by Planning Area (in Thousands)\",\n    x = \"Planning Area\", y = \"Population (Thousands)\",\n    color = \"Density\", size = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n\ngirafe(ggobj = p)\n\n\n\n\n\nTampines, Bedok, and Jurong West are the most populated and dense.\nWestern Islands and Tuas have the lowest population and density.\nThe population is concentrated in a few key areas.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2-population-size-across-singapore-regional-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2-population-size-across-singapore-regional-level",
    "title": "Take-home Exercise 1",
    "section": "6.2. Insight 2.2: Population Size Across Singapore (Regional level)",
    "text": "6.2. Insight 2.2: Population Size Across Singapore (Regional level)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nregion_summary &lt;- pop_data %&gt;%\n  filter(!is.na(Region)) %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Pop = sum(Pop) / 1000, .groups = \"drop\") \n\np &lt;- ggplot(region_summary, aes(x = reorder(Region, -Pop), y = Pop)) +\n  geom_point_interactive(\n    aes(size = Pop, color = Pop,\n        tooltip = paste0(Region, \"\\nPopulation: \", round(Pop, 1), \"K\"),\n        data_id = Region),\n    alpha = 0.8\n  ) +\n  scale_size(range = c(4, 14)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkred\") +\n  labs(\n    title = \"Population by Region (in Thousands)\",\n    x = \"Region\", y = \"Population (Thousands)\",\n    color = \"Density\", size = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5),\n    axis.title = element_text(size = rel(1), face = \"bold\"),\n    plot.title = element_text(size = rel(1.2), face = \"bold\")\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 7,   \n  height_svg = 6     \n)\n\n\n\n\n\nNortheast, Central, and Other regions have the highest populations, each nearing or exceeding 950K, as shown by their large bubble size and dark color.\nEast region follows, with a moderate population around 710K.\nNorth region has the lowest population, approximately 600K, evident from its smaller, lighter-colored bubble.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.3.-age-structure-composition-by-planning-area-young-vs-working-vs-old",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.3.-age-structure-composition-by-planning-area-young-vs-working-vs-old",
    "title": "Take-home Exercise 1",
    "section": "6.3. Insight 2.3. Age Structure Composition by Planning Area: Young vs Working vs Old",
    "text": "6.3. Insight 2.3. Age Structure Composition by Planning Area: Young vs Working vs Old\n\nCentralWestEastNorthNorth-EastThe code\n\n\n\n\n\n\n\n\n\n\n\n\nDiverse distribution: Planning areas in the Central region show a relatively balanced age composition, with most areas clustering near the center of the ternary plot.\nHigh working-age concentration: Majority of dots tilt toward the WorkingAge corner, suggesting Central areas are hubs for working professionals.\nModerate ageing: A few areas like Tanglin, Toa Payoh, and Outram lean slightly toward the Old vertex, indicating a notable proportion of elderly residents.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYoung and working-heavy areas: Most planning areas in the West cluster around high WorkingAge and Young proportions.\nLow ageing population: The Old_pct values remain consistently low, pointing to younger families or newer housing developments.\nUrban expansion: Areas like Tengah and Jurong West are reflective of growing, youthful populations driven by infrastructure and development projects.\n\n\n\n\n\n\n\n\n\n\n\n\n\nEven spread: Eastern areas like Tampines and Pasir Ris show more spread between Young and Old, though still strongly working-age dominant.\nRetirement-ready areas : Slight drift toward the Old vertex for Bedok and Paya Lebar could reflect ageing-in-place among long-term residents.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompact cluster: Northern areas group tightly near the WorkingAge vertex with low Young and Old percentages, suggesting a middle-aged population base.\nLow youth share: Unlike the West or North-East, Young_pct is relatively lower, possibly due to migration or fewer new housing estates.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYouth-oriented mix: Strong presence of Young and WorkingAge populations, especially in areas like Punggol and Sengkang ‚Äî both known for family-friendly housing.\nMinimal ageing: Most North-East areas have the lowest Old_pct, indicating these are emerging or recently developed neighborhoods with few elderly residents.\n\n\n\n\nternary_data &lt;- pop_data %&gt;%\n  filter(Region == \"Northeast\" & !is.na(AgeCategory)) %&gt;%\n  mutate(AgeGroup = case_when(\n    AgeCategory == \"Child\" ~ \"Young\",\n    AgeCategory == \"Working-Age\" ~ \"WorkingAge\",\n    AgeCategory %in% c(\"Young-Old\", \"Medium-Old\", \"Oldest-Old\") ~ \"Old\"\n  )) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  tidyr::pivot_wider(names_from = AgeGroup, values_from = Pop, values_fill = 0) %&gt;%\n  mutate(\n    Total = Young + WorkingAge + Old,\n    Young_pct = Young / Total,\n    WorkingAge_pct = WorkingAge / Total,\n    Old_pct = Old / Total\n  )\n\nggtern(data = ternary_data,\n       aes(x = Young_pct, y = WorkingAge_pct, z = Old_pct,\n           color = PA, size = Total)) +\n  geom_point(alpha = 0.7) +\n  labs(\n    title = \"Age Structure Composition in North-East Region: Young vs Working vs Old, 2024\"\n  ) +\n  theme_tropical() +\n  guides(size = \"none\") +\n  theme(\n    legend.position = \"right\",\n    legend.justification = \"center\",\n    legend.direction = \"vertical\",\n    plot.title = element_text(hjust = 0.5)\n  )\n\nReplace Region == ' ' by Central, East, West, North-East, North, respectively",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.4.-age-distribution-in-the-top-9-most-and-least-populated-areas",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.4.-age-distribution-in-the-top-9-most-and-least-populated-areas",
    "title": "Take-home Exercise 1",
    "section": "6.4. Insight 2.4. Age Distribution in the Top 9 Most and Least Populated Areas",
    "text": "6.4. Insight 2.4. Age Distribution in the Top 9 Most and Least Populated Areas\nThe comparison between the top 9 most and least populated planning areas in Singapore reveals distinct demographic patterns:\na. Top 9 highest population\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntop9_pa &lt;- pop_data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\") %&gt;%\n  slice_max(order_by = Total, n = 9) %&gt;%\n  pull(PA)\n\n\nagecat_pct &lt;- pop_data %&gt;%\n  filter(PA %in% top9_pa, !is.na(AgeCategory)) %&gt;%\n  group_by(PA, AgeCategory) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Pct = Pop / sum(Pop) * 100)\n\nggplot(agecat_pct, aes(x = \"\", y = Pct, fill = AgeCategory)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_wrap(~ PA, ncol = 3) +\n  theme_void() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 9)\n  ) +\n  labs(\n    title = \"Age Group Proportions by Planning Area (Top 9 highest Population)\",\n    fill = \"Age Category\"\n  )\n\n\n\n\n\nDominance of Working-Age population: Across all top 9 planning areas, the Working-Age group forms the largest share, reflecting a strong labor force presence in densely populated zones.\nFamily-oriented demographics: Areas such as Punggol and Choa Chu Kang show a notably higher proportion of children, suggesting these are popular among young families and potentially newer residential developments.\nUrban growth zones: The mix of Children and Young-Old groups in places like Tampines and Jurong West further highlights the appeal to both first-time homeowners and multi-generational households.\n\nb. Top 9 lowest population (Pop &gt; 0)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nleast9_pa &lt;- pop_data %&gt;%\n  filter(!is.na(PA)) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total = sum(Pop), .groups = \"drop\") %&gt;%\n  filter(Total &gt; 0) %&gt;%\n  slice_min(order_by = Total, n = 9) %&gt;%\n  pull(PA)\n\nagecat_pct_least &lt;- pop_data %&gt;%\n  filter(PA %in% least9_pa, !is.na(AgeCategory)) %&gt;%\n  group_by(PA, AgeCategory) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Pct = Pop / sum(Pop) * 100)\n\nggplot(agecat_pct_least, aes(x = \"\", y = Pct, fill = AgeCategory)) +\n  geom_col(width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  facet_wrap(~ PA, ncol = 3) +\n  theme_void() +\n  theme(\n    strip.text = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 9)\n  ) +\n  labs(\n    title = \"Age Group Proportions by Planning Area (Top 9 Least Populated, Pop &gt; 0)\",\n    fill = \"Age Category\"\n  )\n\n\n\n\n\nOverwhelming Working-age dominance: These areas are overwhelmingly populated by Working-Age adults, with very limited presence of children or elderly.\nSkewed population structure: Locations such as Seletar and Museum show populations composed of almost 100% working-age, indicating a non-residential or transient-use zone (e.g., commercial, industrial, or institutional).\nLack of dependents: The near absence of Children or Older Adults suggests these areas have low long-term residential appeal, possibly due to zoning policies or infrastructure designed for other functions.\nPurpose-built zones: The demographic concentration implies planned usage rather than organic residential growth‚Äîthese may serve niche roles in Singapore‚Äôs urban planning.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-age-to-numeric-format",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#convert-age-to-numeric-format",
    "title": "Take-home Exercise 1",
    "section": "4.2.Convert Age to Numeric Format",
    "text": "4.2.Convert Age to Numeric Format\nIn the dataset, the Age column is not entirely numeric due to the presence of textual values ‚Äú90_and_Over‚Äù. To address this, these values were recoded to ‚Äú90‚Äù using a string replacement function, and the entire column was then converted to numeric format.\n\npop_data &lt;- pop_data %&gt;%\n  mutate(\n    Age = str_replace(Age, \"^90\\\\+|90_and_Over\", \"90\"), \n    Age = as.numeric(Age)\n  )",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-code-4",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#the-code-4",
    "title": "Take-home Exercise 1",
    "section": "The code",
    "text": "The code\n\nternary_data &lt;- pop_data %&gt;%\n  filter(Region == \"Northeast\" & !is.na(AgeCategory)) %&gt;%\n  mutate(AgeGroup = case_when(\n    AgeCategory == \"Child\" ~ \"Young\",\n    AgeCategory == \"Working-Age\" ~ \"WorkingAge\",\n    AgeCategory %in% c(\"Young-Old\", \"Medium-Old\", \"Oldest-Old\") ~ \"Old\"\n  )) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  tidyr::pivot_wider(names_from = AgeGroup, values_from = Pop, values_fill = 0) %&gt;%\n  mutate(\n    Total = Young + WorkingAge + Old,\n    Young_pct = Young / Total,\n    WorkingAge_pct = WorkingAge / Total,\n    Old_pct = Old / Total\n  )\n\nggtern(data = ternary_data,\n       aes(x = Young_pct, y = WorkingAge_pct, z = Old_pct,\n           color = PA, size = Total)) +\n  geom_point(alpha = 0.7) +\n  labs(\n    title = \"Age Structure Composition in North-East Region: Young vs Working vs Old, 2024\"\n  ) +\n  theme_tropical() +\n  guides(size = \"none\") +\n  theme(\n    legend.position = \"right\",\n    legend.justification = \"center\",\n    legend.direction = \"vertical\",\n    plot.title = element_text(hjust = 0.5)\n  )\n\nReplace Region == ' ' by Central, East, West, North-East, North, respectively",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.1.-population-size-across-singapores-planning-areas-with-interactivity",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.1.-population-size-across-singapores-planning-areas-with-interactivity",
    "title": "Take-home Exercise 1",
    "section": "6.1 Insight 2.1. Population Size Across Singapore‚Äôs Planning Areas with Interactivity",
    "text": "6.1 Insight 2.1. Population Size Across Singapore‚Äôs Planning Areas with Interactivity\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\npop_summary &lt;- pop_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Pop = sum(Pop) / 1000, .groups = \"drop\") \n\np &lt;- ggplot(pop_summary, aes(x = reorder(PA, -Pop), y = Pop)) +\n  geom_point_interactive(\n    aes(size = Pop, color = Pop,\n        tooltip = paste0(PA, \"\\nPopulation: \", round(Pop, 1), \"K\"),\n        data_id = PA),\n    alpha = 0.8\n  ) +\n  scale_size(range = c(3, 12)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkred\") +\n  labs(\n    title = \"Population by Planning Area (in Thousands)\",\n    x = \"Planning Area\", y = \"Population (Thousands)\",\n    color = \"Density\", size = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n\ngirafe(ggobj = p)\n\n\n\n\n\nTampines, Bedok, and Jurong West are the most populated and dense.\nWestern Islands and Tuas have the lowest population and density.\nThe population is concentrated in a few key areas.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2.-population-size-across-singapore-regional-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2.-population-size-across-singapore-regional-level",
    "title": "Take-home Exercise 1",
    "section": "6.2. Insight 2.2. Population Size Across Singapore (Regional level)",
    "text": "6.2. Insight 2.2. Population Size Across Singapore (Regional level)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nregion_summary &lt;- pop_data %&gt;%\n  filter(!is.na(Region)) %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Pop = sum(Pop) / 1000, .groups = \"drop\") \n\np &lt;- ggplot(region_summary, aes(x = reorder(Region, -Pop), y = Pop)) +\n  geom_point_interactive(\n    aes(size = Pop, color = Pop,\n        tooltip = paste0(Region, \"\\nPopulation: \", round(Pop, 1), \"K\"),\n        data_id = Region),\n    alpha = 0.8\n  ) +\n  scale_size(range = c(4, 14)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkred\") +\n  labs(\n    title = \"Population by Region (in Thousands)\",\n    x = \"Region\", y = \"Population (Thousands)\",\n    color = \"Density\", size = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5),\n    axis.title = element_text(size = rel(1), face = \"bold\"),\n    plot.title = element_text(size = rel(1.2), face = \"bold\")\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 7,   \n  height_svg = 6     \n)\n\n\n\n\n\nNortheast, Central, and Other regions have the highest populations, each nearing or exceeding 950K, as shown by their large bubble size and dark color.\nEast region follows, with a moderate population around 710K.\nNorth region has the lowest population, approximately 600K, evident from its smaller, lighter-colored bubble.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2.-population-size-across-singapore-regional-level-with-interactivity",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2.2.-population-size-across-singapore-regional-level-with-interactivity",
    "title": "Take-home Exercise 1",
    "section": "6.2. Insight 2.2. Population Size Across Singapore (Regional level) with Interactivity",
    "text": "6.2. Insight 2.2. Population Size Across Singapore (Regional level) with Interactivity\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nregion_summary &lt;- pop_data %&gt;%\n  filter(!is.na(Region)) %&gt;%\n  group_by(Region) %&gt;%\n  summarise(Pop = sum(Pop) / 1000, .groups = \"drop\") \n\np &lt;- ggplot(region_summary, aes(x = reorder(Region, -Pop), y = Pop)) +\n  geom_point_interactive(\n    aes(size = Pop, color = Pop,\n        tooltip = paste0(Region, \"\\nPopulation: \", round(Pop, 1), \"K\"),\n        data_id = Region),\n    alpha = 0.8\n  ) +\n  scale_size(range = c(4, 14)) +\n  scale_color_gradient(low = \"lightblue\", high = \"darkred\") +\n  labs(\n    title = \"Population by Region (in Thousands)\",\n    x = \"Region\", y = \"Population (Thousands)\",\n    color = \"Density\", size = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 0.5),\n    axis.title = element_text(size = rel(1), face = \"bold\"),\n    plot.title = element_text(size = rel(1.2), face = \"bold\")\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 7,   \n  height_svg = 6     \n)\n\n\n\n\n\nNortheast, Central, and Other regions have the highest populations, each nearing or exceeding 950K, as shown by their large bubble size and dark color.\nEast region follows, with a moderate population around 710K.\nNorth region has the lowest population, approximately 600K, evident from its smaller, lighter-colored bubble.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take-home Exercise 1"
    ]
  }
]