[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() from the pacman package. This function automatically checks whether the tidyverse package is installed.\n\nIf not installed, it installs it.\nIf already installed, it simply loads it into the R environment.\n\nThis ensures that all required libraries are ready to use without manual installation.\n\npacman::p_load(tidyverse)\n\n\n\n\nThe function read_csv() from the readr package (part of the tidyverse) is used to import datasets into R.\nIn this example, the dataset Exam_data.csv contains exam grades of P3 students from a local school in Singapore.\nüß† Purpose: To load the data into R for analysis.\nüîΩ The code below performs this task:\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nüìã Preview of the data:\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below uses p_load() from the pacman package. This function automatically checks whether the tidyverse package is installed.\n\nIf not installed, it installs it.\nIf already installed, it simply loads it into the R environment.\n\nThis ensures that all required libraries are ready to use without manual installation.\n\npacman::p_load(tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The function read_csv() from the readr package (part of the tidyverse) is used to import datasets into R.\nIn this example, the dataset Exam_data.csv contains exam grades of P3 students from a local school in Singapore.\nüß† Purpose: To load the data into R for analysis.\nüîΩ The code below performs this task:\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nüìã Preview of the data:\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics (Base R) and ggplot2 each plot a histogram of the Maths scores.\n\nBase Rggplot2\n\n\n\nhist(exam_data$MATHS,\n     main = \"Histogram of exam_data$MATHS\",\n     col = \"grey\")\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(\n    bins = 10,\n    boundary = 100,\n    color = \"black\",\n    fill = \"grey\"\n  ) +\n  ggtitle(\"Distribution of Maths scores\") +\n  xlab(\"MATHS\") +\n  ylab(\"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy ggplot2 is preferred\n\n\n\n\nLayered Grammar\nggplot2 builds plots incrementally. You can add layers step-by-step (e.g., points, lines, labels), making it intuitive for complex visuals.\nAesthetic Mapping\nEasily map data to visual features like color, shape, or size ‚Äî enabling richer, multidimensional graphics.\nFaceting Made Easy\nExplore subgroups with facet_wrap() or facet_grid() ‚Äî ideal for comparing distributions or trends across categories.\nProfessional Appearance\nPlots look polished by default and can be styled with built-in themes (theme_minimal(), theme_classic(), etc.).\nConsistent Syntax\nOne consistent framework to produce many chart types ‚Äî making your code easier to read, write, and reuse.\n\n\n\nCompared to base R, ggplot2 encourages a more thoughtful design process, supports deeper customization, and improves reproducibility ‚Äî especially in analytical reports or presentations.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is inspired by Leland Wilkinson‚Äôs Grammar of Graphics. It helps you build plots layer by layer, where each part contributes a unique role to your final visualization.\n\n\n\n\n\n\n\nüî¢ Data\n\n\n\nThe starting point of any plot ‚Äî your dataset. All other layers build on this.\n\n\n\n\n\n\n\n\nüé® Aesthetics\n\n\n\nMaps your data to visual elements like position, color, shape, or size. This layer gives structure to your graphic.\n\n\n\n\n\n\n\n\nüìê Geometries\n\n\n\nThese are the grap hical marks ‚Äî like bars, lines, or points ‚Äî that display your data.\n\n\n\n\n\n\n\n\nüß© Facets\n\n\n\nFaceting allows you to split data into subplots for easier comparison across categories.\n\n\n\n\n\n\n\n\nüìä Statistics\n\n\n\nApplies transformations (e.g., mean, median, count) that help summarize or highlight trends in your data.\n\n\n\n\n\n\n\n\nüß≠ Coordinates\n\n\n\nControls the spatial layout of your plot ‚Äî for example, Cartesian or polar coordinates.\n\n\n\n\n\n\n\n\nüé≠ Themes\n\n\n\nControls the look and feel of your plot: fonts, backgrounds, gridlines, titles, and more.\n\n\nReference:\nWickham, H. (2010). A layered grammar of graphics.\nJournal of Computational and Graphical Statistics, 19(1), 3‚Äì28.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.1. Geometric Objects: geom_bar",
    "text": "1.7.1. Geometric Objects: geom_bar\nWant to see how frequently each category appears in your dataset? geom_bar() is your go-to tool for this.\nThe following code builds a bar chart that counts and displays the number of observations for each RACE in the dataset.\n\nggplot(data = exam_data,\n       aes(x = RACE, fill = RACE)) +\n  geom_bar() +\n  scale_fill_manual(values = c(\"Chinese\" = \"skyblue\",\n                               \"Malay\" = \"seagreen\",\n                               \"Indian\" = \"tomato\",\n                               \"Others\" = \"gold\"))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.2. Geometric Objects: geom_dotplot",
    "text": "1.7.2. Geometric Objects: geom_dotplot\nA dot plot is an effective way to display individual observations. Each dot represents a single data point and is stacked within bins along a continuous axis, typically the x-axis. This makes it a great choice for visualizing distributions while maintaining detail at the individual level.\nThe function geom_dotplot() from ggplot2 allows you to create dot plots with flexible options.\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n‚ö†Ô∏è Caution on Y-Axis Interpretation\n\n\n\nThe y-axis in dot plots simply shows how many dots are stacked. It doesn‚Äôt represent an actual numerical scale and may mislead if interpreted as such.\n\n\n\nEnhancing Dot Plot Clarity\nTo make your dot plot more accurate and aesthetically clear, you can:\n\nAdjust bin width to define horizontal spacing using binwidth\nRemove y-axis labels for cleaner presentation using scale_y_continuous()\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüß© What‚Äôs Happening Here?\n\n\n\n\nbinwidth = 2.5 ensures dots are grouped at consistent intervals.\nscale_y_continuous(NULL, breaks = NULL) removes the y-axis for a cleaner, more truthful visual.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.3. Geometric Objects",
    "text": "1.7.3. Geometric Objects\nBelow is a simple example using the MATHS scores from the exam_data dataset:\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\nThis creates a default histogram using 30 bins, which is often fine ‚Äî but not always ideal.\n\n\n\n\n\n\n‚ú® Customizing Your Bins\n\n\n\nTo make your histogram more insightful, adjust the bin size using either:\n\nbins = n: specify the number of bins\n\nbinwidth = w: specify the width of each bin\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 15)\n\n\n\n\n\n\n\n\nThis example reduces the number of bins to 15, giving a broader view of the data distribution.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.4. Modifying a geometric object by changing geom()",
    "text": "1.7.4. Modifying a geometric object by changing geom()\nAdjusting the appearance of histograms can improve clarity and highlight important trends. The following modifications demonstrate how to refine the default histogram:\n\nThe bins argument sets the number of intervals (e.g., 20 bins).\nThe fill argument defines the interior color of the bars (e.g., light blue).\nThe color argument specifies the border color for each bar (e.g., black).\n\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"light blue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyling Insight\n\n\n\nRefined styling parameters allow for clearer visual distinctions between data segments, enhancing overall interpretation without altering the underlying structure.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.5. Modifying a geometric object by changing aes()",
    "text": "1.7.5. Modifying a geometric object by changing aes()\nWhen using aes() to define aesthetics within ggplot2, visual elements can be dynamically adjusted based on variables in the dataset. In the example below, the fill aesthetic is mapped to the GENDER variable, resulting in differentiated colors for each gender group in the histogram.\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüí° Tip\n\n\n\nMapping aesthetics within aes() enables color, fill, and even transparency (alpha) to reflect group-specific values ‚Äî ideal for highlighting subgroup patterns in the data.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.6. Geometric Objects: geom-density()",
    "text": "1.7.6. Geometric Objects: geom-density()\ngeom_density() offers a smooth visual representation of a numeric distribution by applying kernel density estimation. It serves as a more polished alternative to histograms, particularly for continuous data with an underlying pattern.\nTo visualize the distribution of MATHS scores in the exam_data, a simple density plot can be constructed:\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThis produces a continuous curve that reflects the probability density of the data.\n\n\n\n\n\n\nTip\n\n\n\nFor grouped comparisons, map a grouping variable (e.g., GENDER) to the colour or fill aesthetic inside aes(). This will overlay separate density lines, making it easier to compare distributions.\n\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThis allows side-by-side visual analysis of score distributions for different gender groups, offering insights into performance patterns.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.7. Geometric Objects: geom_boxplot",
    "text": "1.7.7. Geometric Objects: geom_boxplot\nThe geom_boxplot() function is used to display the distribution of continuous data through five key summary statistics ‚Äî including the median, quartiles, and potential outliers.\nThis type of plot provides a clear overview of how data is spread across different groups. In the following example, the distribution of MATHS scores is shown across gender groups.\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe boxplot shows the interquartile range (IQR), median, and any individual outliers beyond the whiskers.\n\n\nNotched Boxplot Comparison\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nBelow is a version of the boxplot with the notch = TRUE option enabled:\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInterpretation Hint\n\n\n\nNon-overlapping notches suggest that the medians differ significantly between groups.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.8. Geometric Objects: geom_violin",
    "text": "1.7.8. Geometric Objects: geom_violin\nThe geom_violin() function provides a way to visualize data distribution through a mirrored density plot. Violin plots are especially useful when comparing multiple groups, as they combine the features of a boxplot with a kernel density estimate ‚Äî offering more insight into the shape of the distribution.\nUnlike traditional density curves that can become visually cluttered when overlayed, violin plots allow side-by-side comparisons of distributions, making it easier to interpret differences across categories.\nThe following example displays the distribution of MATHS scores grouped by gender:\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\nViolin plots are ideal for visualizing variations in data distributions while maintaining clarity ‚Äî especially when comparing multiple groups.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.9. Geometric Objects: geom_point()",
    "text": "1.7.9. Geometric Objects: geom_point()\nThe geom_point() function is a go-to for generating scatter plots, which are ideal for visualizing the relationship between two continuous variables.\nIn the example below, a scatterplot is constructed using MATHS and ENGLISH scores from the exam_data dataset. Each point represents a student, allowing visual inspection of trends or clusters in academic performance.\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case\n\n\n\nScatterplots are commonly used in correlation analysis and model diagnostics, offering an intuitive way to observe linear or non-linear relationships between variables.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.10. geom objects can be combined",
    "text": "1.7.10. geom objects can be combined\nMultiple geom_*() functions can be layered within a single ggplot() call to enhance the richness of a visualization.\nIn the following example, geom_boxplot() is used to summarize the distribution of Maths scores by gender, while geom_point() adds individual observations. The position = \"jitter\" argument helps avoid overplotting by slightly offsetting the points, and the size argument controls dot size.\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\",\n             size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nCombining geom_boxplot() and geom_point() provides both a statistical summary and a granular view of the data. This layered approach improves interpretability by showing trends and outliers simultaneously.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.1. Working with stat()",
    "text": "1.8.1. Working with stat()\nThe example below shows a basic boxplot generated using geom_boxplot(). While it effectively displays the distribution and spread of the MATHS scores across genders, something important is missing ‚Äî the mean.\n\nggplot(data = exam_data,\n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe plot summarizes five key statistics (median, quartiles, and whiskers), but it does not show the average score ‚Äî a common value of interest when comparing groups.\n\n\n\n\n\n\nInsight\n\n\n\nBy default, geom_boxplot() does not display means. To include them, additional layers like stat_summary() can be added to overlay statistical measures such as the mean or standard deviation.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.2. Working with stat - the stat_summary() method",
    "text": "1.8.2. Working with stat - the stat_summary() method\nTo enhance a boxplot by explicitly displaying the mean values, the stat_summary() function is used. This method overrides the default geometric object and allows the addition of custom summary statistics, such as the mean, directly onto the plot.\n\nggplot(data = exam_data,\n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               colour = \"red\",\n               size = 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy this matters\n\n\n\nWhile boxplots highlight the median and spread of the data, visualizing the mean provides additional context‚Äîespecially useful for comparing central tendencies across groups.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.3. Working with stat - the geom() method",
    "text": "1.8.3. Working with stat - the geom() method\nAnother way to layer summary statistics onto a plot is by using a geom_() function while specifying the statistical transformation. In this example, geom_point() is used with stat = \"summary\" to display the mean value directly on top of each boxplot.\n\nggplot(data = exam_data,\n       aes(y = MATHS, x = GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",\n             fun = \"mean\",\n             colour = \"red\",\n             size = 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUsing geom() in combination with stat = ‚Äúsummary‚Äù offers flexibility to customize how summary values are represented‚Äîsuch as using different shapes, colors, or sizes.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8.4. Adding a best fit curve on a scatterplot?",
    "text": "1.8.4. Adding a best fit curve on a scatterplot?\nTo better interpret the relationship between two continuous variables‚Äîsuch as Maths and English scores‚Äîa trend line can be added to a scatterplot. This helps illustrate the underlying pattern in the data more clearly.\nUsing geom_smooth() with Default Settings\nThe geom_smooth() function in ggplot2 adds a smooth curve to scatterplots. By default, it uses the loess method to estimate a trend line.\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(size = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default smoothing method applied here is loess, which fits a local polynomial regression.\n\n\nCustomizing the Smoothing Method To fit a linear regression line, the method can be explicitly set to lm (linear model). This is especially useful when the aim is to model a linear trend.\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5)\n\n\n\n\n\n\n\n\nThis configuration overlays a straight line that minimizes the squared differences between the observed and predicted values, giving a clear representation of linear correlation.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.1. Working with facet_wrap()",
    "text": "1.9.1. Working with facet_wrap()\nThe facet_wrap() function is used to break a dataset into a series of plots, each representing a subset of the data defined by a single variable. It arranges the plots in a 2D grid layout, making efficient use of screen space‚Äîespecially helpful when the display area is rectangular.\nThis method is ideal for visualizing the distribution of a variable across multiple categories.\nExample: Plotting Maths scores by class using facet_wrap(~ CLASS)\n\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\nEach small panel reveals how Maths scores are distributed in each class, providing side-by-side insights for comparison.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.2. facet_grid() function",
    "text": "1.9.2. facet_grid() function\nThe facet_grid() function is used to generate a matrix of panels, organized by rows and columns based on one or two categorical variables. This method is most effective when all combinations of the variables exist in the dataset, ensuring a full grid layout.\nThis approach offers a structured way to visualize interactions between two factors simultaneously.\nExample: Generating a histogram of Maths scores, separated by CLASS using facet_grid().\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\nEach panel represents a different class, enabling a straightforward comparison of score distributions.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.1. Working with Coordinate",
    "text": "1.10.1. Working with Coordinate\nBy default, bar charts in ggplot2 are displayed in a vertical orientation. The example below uses geom_bar() to plot the distribution of the RACE variable.\n\nggplot(data = exam_data, \n       aes(x = RACE)) + \n  geom_bar()\n\n\n\n\n\n\n\n\nThe default behavior results in a vertical bar chart.\nTo change the orientation and produce a horizontal bar chart, the coord_flip() function can be added. This is especially useful when category labels on the x-axis are lengthy or when a horizontal format provides better readability.\n\nggplot(data = exam_data, \n       aes(x = RACE)) + \n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\nThe output now displays the bar chart in horizontal format.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10.2. Changing the y- and x-axis range",
    "text": "1.10.2. Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, size = 0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, size = 0.5) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11.1. Working with theme",
    "text": "1.11.1. Working with theme\nHorizontal Bar Charts with Different Themes\n\ntheme_gray()theme_classic()theme_minimal()\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nEach theme alters the chart‚Äôs visual presentation while maintaining clarity and focus. Toggle the tabs above to preview how different styling choices influence readability and aesthetics.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "1 - A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on session, you‚Äôll dive into the world of interactive data visualization using two powerful R packages:\n\nggiraph ‚Äì for adding interactivity to your ggplot2 charts\n\nplotly ‚Äì for creating stunning, interactive web-based graphics\n\nLet‚Äôs bring your data to life‚Äîclick, hover, and explore like never before!",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.4.1. Tooltip effect with tooltip aesthetic",
    "text": "3.4.1. Tooltip effect with tooltip aesthetic\nThe example below demonstrates how to create an interactive statistical plot using the ggiraph package. The process involves two main steps:\n\nConstructing a ggplot object with interactive geoms\n\nRendering it using girafe() to produce an interactive SVG object for the HTML page\n\nCode Example\n\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\n\n\nHow It Works\n\n\n\n\ngeom_dotplot_interactive() adds interactive behavior to standard ggplot2 geoms.\nThe tooltip aesthetic defines the content shown when hovering over each element.\ngirafe() renders the plot as an interactive SVG widget, making it suitable for web display.\n\nFor more information on interactive geoms, see the ggiraph documentation.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.5.1. Displaying multiple information on tooltip",
    "text": "3.5.1. Displaying multiple information on tooltip\n\n\n\n\n\n\nCustomizing Tooltip Content\n\n\n\nThe tooltip content can be customized by creating a new field using string concatenation. In the example below, the tooltip column combines ID and CLASS values for each observation.\n\n\n\nThe codeThe plot\n\n\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS))\n\np &lt;- ggplot(data = exam_data, \n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8 * 0.618\n)\n\n\nLines 1‚Äì3 create a new field called tooltip and populate it with combined text from the ID and CLASS columns.\nLine 7 applies this customized tooltip content within geom_dotplot_interactive().",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.1. Customising Tooltip style",
    "text": "3.6.1. Customising Tooltip style\nTooltips are an essential part of interactive visualizations, offering users instant context.\nThis section demonstrates how to customize tooltip styles in {ggiraph} using the opts_tooltip function with CSS declarations.\n\nExample\n\n\nThe codeThe plot\n\n\n\n# Define custom tooltip CSS\ntooltip_css &lt;- \"background-color:white; font-style:bold; color:black;\" \n\n# Build the interactive dot plot\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the plot with customized tooltip styling\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,  # Apply golden ratio for balanced proportions\n  options = list(\n    opts_tooltip(css = tooltip_css)\n  )\n)\n\nKey Styling Points: - Background Color: White - Font Color: Black - Font Style: Bold\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyling Tip\n\n\n\nApplying subtle customizations to tooltip appearance can enhance visualization clarity and maintain consistent visual branding across projects.\n\n\n\nPractice: Plot with customized hover styles\n\n# Define advanced tooltip and hover CSS\ntooltip_css &lt;- \"\n  background-color: #E0F7FA;    \n  color: #006064;      \n  font-weight: bold;\n  font-family: 'Verdana', sans-serif;\n  padding: 8px;\n  border: 2px solid #4DD0E1;    \n  border-radius: 10px;\n  box-shadow: 3px 3px 8px rgba(0, 96, 100, 0.3);\n\"\nhover_css &lt;- \"fill:skyblue; stroke:white; stroke-width:2px;\"\nselected_css &lt;- \"fill:red; stroke:black; stroke-width:3px;\"\n\n# Build interactive dot plot\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID, data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the interactive plot with advanced customizations\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_tooltip(css = tooltip_css),\n    opts_hover(css = hover_css),\n    opts_selection(css = selected_css, type = \"single\")\n  )\n)\n\n\n\n\n\nKey Advanced Styling Points:\n\nTooltip:\n\nBackground: Black\nText Color: White\nStyle: Italic\nPadding and Rounded Corners\nShadow effect\n\nHover Effect:\n\nFill changes to Sky Blue\nBlack outline with 2px thickness\n\nSelection Effect:\n\nFill turns Red\nStronger black outline (3px thickness)\n\n\nAdditional References\n\nFurther customization options for girafe objects: View documentation\nBenefits of tooltip customization:\n\nIncreases readability\nEnhances user interaction\nSupports consistent design systems &gt; Small design improvements in tooltips can significantly elevate the quality of interactive data experiences.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.2. Displaying Statistics on Tooltip",
    "text": "3.6.2. Displaying Statistics on Tooltip\nTooltips can also be customized to display dynamic statistical summaries.\nIn the example below, a function is created to compute the 90% confidence interval of the mean, and the resulting statistics are embedded directly into the tooltip text.\n\nCode Example\n\n\n# Define tooltip function displaying mean and confidence interval\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\n# Build interactive plot with statistical tooltips\ngg_point &lt;- ggplot(data = exam_data, aes(x = RACE)) +\n  stat_summary(\n    aes(\n      y = MATHS,\n      tooltip = after_stat(tooltip(y, ymax))\n    ),\n    fun.data = \"mean_se\",\n    geom = GeomInteractiveCol,\n    fill = \"light blue\"\n  ) +\n  stat_summary(\n    aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\",\n    width = 0.2,\n    size = 0.2\n  )\n\n# Render the plot\ngirafe(\n  ggobj = gg_point,\n  width_svg = 8,\n  height_svg = 8 * 0.618\n)\n\n\n\n\n\nKey Components:\n\nTooltip: Displays mean ¬± standard error dynamically\nInteractive Element: Bars created with GeomInteractiveCol.\nAdditional Layer: errorbar geom added to represent variability.\n\n\nPractice - Additional Visualization: Flipping the Coordinates\nApplying coord_flip() transforms the visualization to a horizontal layout, enhancing readability when many categories exist.\n\nCode Example\n\n\n# Flipped and color-enhanced version of the interactive plot\ngg_point_flipped_color &lt;- ggplot(data = exam_data, aes(x = RACE, fill = RACE)) +\n  stat_summary(\n    aes(\n      y = MATHS,\n      tooltip = after_stat(tooltip(y, ymax))\n    ),\n    fun.data = \"mean_se\",\n    geom = GeomInteractiveCol\n  ) +\n  stat_summary(\n    aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\",\n    width = 0.2,\n    size = 0.2\n  ) +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  theme_minimal()\n\n# Render the flipped, colored graph\ngirafe(\n  ggobj = gg_point_flipped_color,\n  width_svg = 8,\n  height_svg = 8 * 0.618\n)\n\n\n\n\n\nVisual Output:\nA horizontally flipped interactive column chart, maintaining tooltips that display mean scores and confidence intervals.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.3. Hover Effect with data_id Aesthetic",
    "text": "3.6.3. Hover Effect with data_id Aesthetic\nThe data_id aesthetic provides another interactive feature in {ggiraph}, allowing elements to be highlighted upon mouse hover.\nThis creates a more dynamic and responsive visualization experience.\n\nCode Example\n\n\n# Build interactive dot plot with data_id for hover effect\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the interactive plot\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\n\nHover Interaction: Elements sharing the same data_id will be highlighted together when hovered.\n\n\n\n\n\n\n\nDefault Hover Style\n\n\n\nThe default hover effect is controlled by:\n\nhover_css = \"fill:orange;\"\n\nMeaning elements will change their fill color to orange when hovered.\n\n\nUseful Related Parameters\n\nhover_css: Defines the CSS styling applied on hover. Custom styles such as changing stroke color, size, or opacity can be specified.\nselected_css: Defines styling when an element is selected (optional).\ntooltip: Can be combined with data_id to display additional information on hover.\n\n\nInteractive highlighting facilitates easier exploration of grouped data relationships within a visualization.\n\n\nPractice: Display labels dynamically during hover interactions\n\n# Build interactive dot plot with both data_id and tooltip\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(\n      data_id = CLASS,  # Highlight grouped elements\n      tooltip = paste(\"Class:\", CLASS)  # Display label on hover\n    ),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the interactive plot\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\nKey Interactive Features:\n\nHover Highlight: Elements associated with the same CLASS are highlighted together.\nTooltip Display: Shows a label \"Class: [CLASS]\" when hovering over any dot.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Welcome to this chapter! Here, you‚Äôll explore a set of powerful ggplot2 extensions that help you craft stunning, publication-ready visualizations with precision and polish.\nBy the end of this session, you‚Äôll be able to confidently:\n\nControl annotation placement using the {ggrepel} package ‚Äî no more overlapping labels!\nDesign publication-quality visuals with aesthetic finesse using {ggthemes} and {hrbrthemes}.\nBuild composite figures by smartly combining multiple plots using the {patchwork} package.\n\nLet‚Äôs level up your data storytelling game ‚Äî one plot at a time!",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.2.1. Installing and loading the required libraries",
    "text": "2.2.1. Installing and loading the required libraries\nIn this exercise, alongside tidyverse, we‚Äôll use four essential R packages to boost your plotting game with ggplot2. Here‚Äôs a quick rundown:\n\n{ggrepel}: Avoid overlapping text labels by using repelling geoms.\n{ggthemes}: Access a library of extra themes, geoms, and scales for your plots.\n{hrbrthemes}: Add typography-focused themes for better readability and polish.\n{patchwork}: Seamlessly stitch multiple ggplot2 graphs into a single composite figure.\n\nTo ensure all packages are installed and loaded, use the following code chunk:\n\npacman::p_load(\n  ggrepel, \n  patchwork, \n  ggthemes, \n  hrbrthemes, \n  tidyverse\n)\n\n\n\n\n\n\n\nSmart Loading Trick!\n\n\n\nThis command checks if the packages are already installed.\nIf not, it installs them ‚Äî saving you time and hassle!",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.2.2. Importing data",
    "text": "2.2.2. Importing data\nA dataset named Exam_data is used in this section. It contains year-end examination scores for a cohort of Primary 3 students from a local school and is stored in CSV format.\nThe read_csv() function from the readr package, part of the tidyverse, is applied to import the file:\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nüìã Preview of the data:\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.3.1. Working with ggrepel",
    "text": "2.3.1. Working with ggrepel\nAdding too many labels to a plot can clutter the visualization and reduce clarity. The ggrepel package provides an effective solution by automatically adjusting the position of labels to avoid overlapping.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.4.1. Working with ggtheme package",
    "text": "2.4.1. Working with ggtheme package\nThe ggthemes package offers additional themes for ggplot2 that mimic the visual styles of well-known publications and tools such as:\n\nEdward Tufte\nStephen Few\nFivethirtyeight\nThe Economist\nThe Wall Street Journal\nStata\nExcel\n\nIn the following example, the Economist theme is applied.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\nMore from ggthemes\n\n\n\nAdditional geoms and scales are also available via ggthemes.\nMore information can be found in this vignette.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.4.2. Working with hrbthems package",
    "text": "2.4.2. Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this ‚Äúproduction workflow‚Äù is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?`\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.1. Creating Composite Graphics: patchwork methods",
    "text": "2.5.1. Creating Composite Graphics: patchwork methods\nSeveral ggplot2 extensions provide functions to create composite graphics by combining multiple plots into a single figure. Notable examples include:\n\ngrid.arrange() from the gridExtra package\n\nplot_grid() from the cowplot package\n\npatchwork, a purpose-built extension for composing multiple ggplot2 outputs into a unified layout\n\nAmong these, the patchwork package offers a particularly simple and intuitive syntax for arranging plots. The basic layout rules include:\n\nUse the + operator for two-column layouts\n\nWrap plots in parentheses () to group them\n\nUse the / operator to stack plots in rows",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.2. Combining two ggplot2 graphs",
    "text": "2.5.2. Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using the patchwork package.\n\n\n\n\n\n\nNote\n\n\n\nObserve how clean and intuitive the syntax is when building a combined figure layout!\n\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.3. Combining three ggplot2 graphs",
    "text": "2.5.3. Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n‚Äú/‚Äù operator to stack two ggplot2 graphs,\n‚Äú|‚Äù operator to place the plots beside each other,\n‚Äú()‚Äù operator the define the sequence of the plotting.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.4. Creating a composite figure with tag",
    "text": "2.5.4. Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.5. Creating figure with insert",
    "text": "2.5.5. Creating figure with insert\nBesides placing plots side-by-side or in stacked layouts, patchwork also enables flexible placement of plots on top of each other.\nUsing inset_element(), one or more graphics can be freely overlaid on a base plot ‚Äî ideal for highlighting insights with mini visual summaries.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on_Exercise 2 - Beyond ggplot2 Fundamentals",
    "section": "2.5.6. Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6. Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "2 - Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "Visual Analytics and Applications\n    \n    Welcome to Nguyen Ha (Summer)'s portfolio.\n     This website is crafted as part of the ISSS608 Visual Analytics and Applications course at Singapore Management University (SMU), under the guidance of Professor Kam Tin Seong.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-and-tooltip-label",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-and-tooltip-label",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.3 Hover Effect with data_id and Tooltip Label",
    "text": "3.6.3 Hover Effect with data_id and Tooltip Label\nThe data_id aesthetic enables hover highlights,\nand by adding a tooltip aesthetic, labels can be displayed dynamically during hover interactions.\n\nThe codeThe plot\n\n\n\n# Build interactive dot plot with both data_id and tooltip\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(\n      data_id = CLASS,  # Highlight grouped elements\n      tooltip = paste(\"Class:\", CLASS)  # Display label on hover\n    ),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render the interactive plot\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.4. Styling hover effect",
    "text": "3.6.4. Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n# Build interactive dot plot with both data_id and tooltip\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nDefault Hover Style\n\n\n\nThe default hover effect is controlled by:\n\nhover_css = \"fill:orange;\"\n\nMeaning elements will change their fill color to orange when hovered.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.4.5. Combining tooltip and hover effect",
    "text": "3.4.5. Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.6. Click Effect with onclick",
    "text": "3.6.6. Click Effect with onclick\nThe onclick argument of ggiraph provides hotlink interactivity directly in web-based plots. You can associate JavaScript actions with data points‚Äîsuch as opening a new tab‚Äîwhen a user clicks on a visual element.\n\nExample: Make Data Points Clickable\n\nThe following code chunk demonstrates how to embed a window.open() JavaScript call into your dataset for clickable links:\n\n# Generate onclick JavaScript calls\nexam_data$onclick &lt;- sprintf(\n  \"window.open(\\\"%s%s\\\")\",\n  \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\n  as.character(exam_data$ID)\n)\n\n# Create interactive dot plot\np &lt;- ggplot(data = exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID, onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# Render as an interactive widget\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe onclick argument must be a string column in your dataset that contains valid JavaScript expressions. Invalid strings will break interactivity.\n\n\n\nPractice: Combine with Tooltip for Better UX\n\naes(tooltip = ID, onclick = onclick)\n\nAesthetic mapping: \n* `tooltip` -&gt; `ID`\n* `onclick` -&gt; `onclick`\n\n\n\n\n\n\n\n\nTip\n\n\n\nCombining tooltip with onclick provides both hover feedback and clickable navigation. This improves the user‚Äôs understanding before taking action.\n\n\n\n\nPractice: Debug with a Click URL Table\n\nlibrary(DT)\ndatatable(exam_data[, c(\"ID\", \"onclick\")])\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis preview helps validate that the links are correct and safe before rendering your interactive plot to users.\n\n\n\n\nPractice: Add a Static Bar Chart for Context\nProvide an overview of the MATHS score distribution alongside the interactive plot.\n\nggplot(exam_data, aes(x = MATHS)) +\n  geom_bar(fill = \"#4DAF4A\") +\n  labs(title = \"Distribution of MATHS Scores\", x = \"Score\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvance\n\n\n\nYou can pair ggiraph with Shiny to allow reactive onclick behavior, making it possible to dynamically change visuals or fetch new data when users click.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.6.7. Coordinated Multiple Views with ggiraph",
    "text": "3.6.7. Coordinated Multiple Views with ggiraph\nCoordinated multiple views allow you to interactively highlight shared data points across multiple plots. For example, clicking on a dot in one plot (e.g., MATHS) will also highlight the corresponding point in another plot (e.g., ENGLISH).\n\nCode: Interactive Coordination Example\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\n\n\nKey Concept\n\n\n\nThe data_id aesthetic links the same data point across different plots. When selected in one plot, it triggers a highlight in the other.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.7.1. Creating an Interactive Scatter Plot: plot_ly() Method",
    "text": "3.7.1. Creating an Interactive Scatter Plot: plot_ly() Method\nThe plot_ly() function allows you to build interactive scatter plots from raw data, using intuitive syntax. Below is a simple example that visualizes students‚Äô MATHS and ENGLISH scores.\n\nExample: Scatter Plot of Exam Scores\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(\n  data = exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH\n)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe tilde ~ symbol is used in plotly to signal mapping of variables from the dataset‚Äîsimilar to aes() in ggplot2.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.7.2. Working with visual variable: plot_ly() method",
    "text": "3.7.2. Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e.¬†RACE).\n\nExample\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.7.3. Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3. Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nExample\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.7.4. Coordinated Multiple Views with plotly",
    "text": "3.7.4. Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nExample\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.8.1. Interactive Data Table: DT package",
    "text": "3.8.1. Interactive Data Table: DT package\nThe DT package in R is a wrapper for the DataTables JavaScript library. It enables the rendering of interactive and searchable HTML tables directly from R.\n\nPowered by the JavaScript library DataTables\nCompatible with R Markdown and Shiny outputs\nSupports sorting, filtering, pagination, and column visibility\n\n\n\n\n\n\n\nDid you know?\n\n\n\nThe DT package is part of the htmlwidgets ecosystem, which means you can combine it with tools like crosstalk to enable linked interactivity between plots and tables.\n\n\n\nExample: Render a Compact Interactive Table\n\n\nDT::datatable(\n  exam_data,\n  class = \"compact\"\n)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can customize the appearance using the class argument (‚Äúcompact‚Äù, ‚Äústripe‚Äù, ‚Äúhover‚Äù, ‚Äúcell-border‚Äù). You can also enable search, export, or column filters via the options argument.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.8.2. Linked Brushing: crosstalk Method",
    "text": "3.8.2. Linked Brushing: crosstalk Method\nLinked brushing allows you to select points on a plot and highlight the corresponding rows in a data table, and vice versa. This interaction is made possible using the crosstalk package, which enables cross-widget communication between plotly, DT, and other htmlwidgets.\n\nExample Code: Coordinated Highlighting\n\n\nThe PlotThe Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.9.1. ggiraph",
    "text": "3.9.1. ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nSwiss Olympians - the solo specialists (interactive graphs using ggiraph)\nGgiraph Reference Guide (online)\nGgiraph Reference Guide (PDF)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "title": "Hands-on_Exercise 3 - Programming Interactive Data Visualisation with R",
    "section": "3.9.2. plotly for R",
    "text": "3.9.2. plotly for R\n\nGetting Started with Plotly in R\nExample plotly R graphs collection\nCarson Sievert (2020) ‚Äî Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC. Free online version available here\nPlotly R Figure Reference\nPlotly R Library Fundamentals\nPlotly Getting Started\nStep-by-step gganimate tutorial (by senior)\nBuild animation with gganimate\nCreate composite gif with multiple gganimate panels",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "3 - Programming Interactive Data Visualisation with R"
    ]
  }
]