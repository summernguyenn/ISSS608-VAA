{
  "hash": "c7868820e514c17f4cda2669680b464a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 4.1 - Visualising Distribution\"\nauthor: \"Nguyen Nguyen Ha (Summer)\"\ndate: \"May 6, 2025\"\ndate-modified:  \"May 6, 2025\"\nformat:\n  html:\n    css: styles.css\n    toc: true\nexecute: \n  warning: false\n  freeze: true\n---\n\n\n\n# 1. Learning Outcome\n\nVisualizing distributions is a fundamental aspect of statistical analysis. While Chapter 1 introduced common methods like histograms, density curves, boxplots, notch plots, and violin plots using ggplot2, this chapter explores two relatively new and effective techniques: **ridgeline plots** and **raincloud plots**. We will demonstrate how to create these visualizations using **ggplot2** and its extensions.\n\n# 2. Getting Started\n\n## 2.1 Installing and loading the packages\n\nFor this exercise, we will utilize the following R packages:\n\n-   **`ggridges`**: For creating ridgeline plots.\n\n-   **`ggdist`**: For visualizing distributions and uncertainty.\n\n-   **`tidyverse`**: A collection of R packages for data science and visualization.\n\n-   **`ggthemes`**: To access additional themes, scales, and geoms for ggplot2.\n\n-   **`colorspace`**: To provide a comprehensive toolbox for color selection and manipulation.\n\nThe code chunk below loads these packages into Rstudio environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n\n## 2.2. Data import\n\nA dataset named *`Exam_data`* is used in this section. It contains year-end examination scores for a cohort of Primary 3 students from a local school and is stored in CSV format.\n\nThe `read_csv()` function from the [**readr**](https://readr.tidyverse.org/) package, part of the **tidyverse**, is applied to import the file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n```\n:::\n\n\n\n📋 Preview of the data:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|ID         |CLASS |GENDER |RACE    | ENGLISH| MATHS| SCIENCE|\n|:----------|:-----|:------|:-------|-------:|-----:|-------:|\n|Student321 |3I    |Male   |Malay   |      21|     9|      15|\n|Student305 |3I    |Female |Malay   |      24|    22|      16|\n|Student289 |3H    |Male   |Chinese |      26|    16|      16|\n|Student227 |3F    |Male   |Chinese |      27|    77|      31|\n|Student318 |3I    |Male   |Malay   |      27|    11|      25|\n|Student306 |3I    |Female |Malay   |      31|    16|      16|\n\n\n:::\n:::\n\n\n\n# 3. Visualising Distribution with Ridgeline Plot\n\n[*Ridgeline plot*](https://www.data-to-viz.com/graph/ridgeline.html) also known as Joyplots, are a visualization technique that effectively reveals the distribution of a numeric value across multiple groups. They present a series of density plots or histograms, aligned on the same horizontal scale with slight overlap, allowing for easy comparison of distributions between groups.\n\nThe figure below illustrates a ridgeline plot showcasing the distribution of English scores across different classes.\n\n![](images/1.png)\n\n::: {.callout-tip note=\"Note\"}\n-   Ridgeline plots are most effective when visualizing the distribution of a numeric variable across multiple groups, especially when the number of groups is moderate to high. Their overlapping nature allows for efficient space utilization compared to traditional methods with separate windows for each group. However, if you have fewer than five groups, other distribution plots might be more suitable.\n\n-   These plots are useful when a clear pattern or ranking exists among the groups. Otherwise, excessive overlap between the distributions can lead to a cluttered and uninterpretable plot, hindering insights.\n:::\n\n## 3.1. Plotting ridgeline graph: ggridges method\n\nSeveral methods exist for creating ridgeline plots in R. This section focuses on using [ggridges](https://wilkelab.org/ggridges/index.html) package, which provides two primary geoms for this purpose:\n\n-   [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html): This geom directly uses height values to draw the ridgelines.\n\n-   [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html): This geom first estimates data densities and then draws the ridgelines based on these density estimates.\n\nThe following ridgeline plot is created using `geom_density_ridges()`\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## 3.2. Varying fill colors along the x axis\n\nSometimes we desire ridgeline plots where the area under each curve is not filled with a single solid color but rather with a gradient of colors along the x-axis. This effect can be achieved using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). These functions operate similarly to `geom_ridgeline()` and `geom_density_ridges()`, respectively, but with the added capability of varying fill colors. However, it's important to note that these functions currently do not support both changing fill colors and transparency simultaneously.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## 3.3. Mapping the probabilities directly onto colour\n\nThe **ggridges** package not only provides specialized geoms for creating ridgeline plots but also offers [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html), a function that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) from ggplot2. This function is specifically designed for use within the `ggridges` package.\n\nThe figure below illustrates a ridgeline plot created by mapping the probabilities calculated using `stat(ecdf)`, which represents the empirical cumulative density function for the distribution of English scores.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\nIt is important to include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.\n\n## 3.4. Ridgeline plots with quantile lines\n\nUsing [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile using the calculated `stat(quantile)` aesthetic as shown in the figure below.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n\n:::\n\nInstead of defining quantiles using numerical values, we can specify them by cut points such as 2.5% and 97.5% to color the ridgeline plot. This approach highlights the tails of the distribution, providing insights into extreme values.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n# 4. Visualising Distribution with Raincloud Plot\n\nThe Raincloud Plot is a visualization technique that combines a half-density plot with a box plot, creating a visual that resembles a raincloud. This approach enhances the traditional box plot by highlighting multiple modalities within the data distribution, which the box plot alone may not reveal.\n\nIn this section, we will learn how to create a raincloud plot to visualize the distribution of English scores across different racial groups. This will be achieved using functions from the **ggdist** and **ggplot2** packages.\n\n## 4.1. Plotting a Half Eye graph\n\nWe start by plotting a Half-Eye graph using `stat_halfeye()` from the **ggdist** package. This function creates a visualization that includes a half-density plot and a slab interval.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n\n\n**Note**: The slab interval can be removed by setting `.width = 0` and `point_colour = NA`.\n:::\n\n## 4.2. Adding the boxplot with `geom_boxplot()`\n\nNext, we add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09) of ggplot2. This produces a narrow boxplot with reduced width and adjusted opacity.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n\n:::\n\n## 4.3 Adding the Dot Plots with  `stat_dots()`\n\nTo enhance the visualization, we incorporate a third geometric layer using `stat_dots()` from the **ggdist** package. This creates a half-dotplot, which resembles a histogram and visually represents the number of samples (dots) within each bin. By setting `side = \"left\"`, we position the dotplot to the left-hand side of the raincloud plot.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n\n:::\n\n## 4.4. Finishing touch\n\nFinally, `coord_flip()` from the `ggplot2` package is employed to rotate the raincloud plot horizontally, creating the characteristic raincloud shape. Additionally, `theme_economist()` from the `ggthemes` package is applied to enhance the visual appeal of the plot, providing a professional and publication-ready aesthetic.\n\n::: panel-tabset\n## The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n\n:::\n\n### [**Practice: A more visually effective version**]{style=\"color:#2E86C1; background-color: #FFFF99;\"}\n\n::: panel-tabset\n\n### The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex401_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n### The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, aes(x = RACE, y = ENGLISH, fill = RACE)) +\n  stat_halfeye(\n    adjust = 0.5,\n    justification = -0.3,  # Slightly more space\n    .width = 0,\n    point_colour = NA,\n    alpha = 0.6\n  ) +\n  geom_boxplot(\n    width = 0.2,\n    outlier.shape = NA,\n    color = \"black\",\n    alpha = 0.8\n  ) +\n  stat_dots(\n    side = \"left\",\n    justification = 1.3,\n    binwidth = 0.5,\n    dotsize = 1.3,\n    alpha = 0.5\n  ) +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_economist() +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\")\n  ) +\n  labs(\n    title = \"Distribution of English Scores by Race\",\n    x = \"Race\",\n    y = \"English Score\"\n  )\n```\n:::\n\n\n:::\n# Reference\n\n-   [Introducing Ridgeline Plots (formerly Joyplots)](https://blog.revolutionanalytics.com/2017/07/joyplots.html)\n\n-   Claus O. Wilke [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) especially Chapter [6](https://clauswilke.com/dataviz/visualizing-amounts.html), [7](https://clauswilke.com/dataviz/histograms-density-plots.html), [8](https://clauswilke.com/dataviz/ecdf-qq.html), [9](https://clauswilke.com/dataviz/boxplots-violins.html) and [10](https://clauswilke.com/dataviz/visualizing-proportions.html).\n\n-   Allen M, Poggiali D, Whitaker K et al. [“Raincloud plots: a multi-platform tool for robust data. visualization”](https://wellcomeopenresearch.org/articles/4-63) \\[version 2; peer review: 2 approved\\]. Welcome Open Res 2021, pp. 4:63.\n\n-   [Dots + interval stats and geoms](https://mjskay.github.io/ggdist/articles/dotsinterval.html)\n",
    "supporting": [
      "Hands-on_Ex401_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}